diff --git a/src/structures/GuildEmoji.js b/src/structures/GuildEmoji.js
index 79ab303c570f76a1202adc74de5ef18f21d1d361..df3ffb0abb21953138f6392311893ddfa5c61a60 100644
--- a/src/structures/GuildEmoji.js
+++ b/src/structures/GuildEmoji.js
@@ -55,8 +55,9 @@ class GuildEmoji extends BaseGuildEmoji {
    * @readonly
    */
   get deletable() {
-    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');
-    return !this.managed && this.guild.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
+    const { me } = this.guild;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
+    return !this.managed && me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
   }
 
   /**
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index f49876da48b461d4f95047ee3823330d197e5a19..860c3faa91e0a2bd075ab8c14199c6b2166e24cd 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -239,8 +239,9 @@ class GuildMember extends Base {
     if (this.user.id === this.guild.ownerId) return false;
     if (this.user.id === this.client.user.id) return false;
     if (this.client.user.id === this.guild.ownerId) return true;
-    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');
-    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
+    const { me } = this.guild;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
+    return me.roles.highest.comparePositionTo(this.roles.highest) > 0;
   }
 
   /**
@@ -249,7 +250,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get kickable() {
-    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');
     return this.manageable && this.guild.me.permissions.has(PermissionFlagsBits.KickMembers);
   }
 
@@ -259,7 +259,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get bannable() {
-    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');
     return this.manageable && this.guild.me.permissions.has(PermissionFlagsBits.BanMembers);
   }
 
@@ -272,7 +271,7 @@ class GuildMember extends Base {
     return (
       !this.permissions.has(PermissionFlagsBits.Administrator) &&
       this.manageable &&
-      (this.guild.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
+      this.guild.me.permissions.has(PermissionFlagsBits.ModerateMembers)
     );
   }

diff --git a/src/structures/Invite.js b/src/structures/Invite.js
index 243a243e506fb3d95f8a6362365b049e5a967de6..db6b87b4c6693dc26cd8ba20658cca441dffb515 100644
--- a/src/structures/Invite.js
+++ b/src/structures/Invite.js
@@ -233,10 +233,11 @@ class Invite extends Base {
   get deletable() {
     const guild = this.guild;
     if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
-    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');
+    const { me } = guild;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
     return Boolean(
       this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
-        guild.me.permissions.has(PermissionFlagsBits.ManageGuild),
+      me.permissions.has(PermissionFlagsBits.ManageGuild),
     );
   }
 
diff --git a/src/structures/Message.js b/src/structures/Message.js
index e9c484f97ce361339cb5eaff05a8f58555c7b5d2..a0531b15a6b72efe9d94c8b4516eae2b138b9036 100644
--- a/src/structures/Message.js
+++ b/src/structures/Message.js
@@ -582,8 +582,8 @@ class Message extends Base {
 
     return Boolean(
       this.author.id === this.client.user.id ||
-        (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
-          this.guild.me.communicationDisabledUntilTimestamp < Date.now()),
+      (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
+        this.guild.me.communicationDisabledUntilTimestamp < Date.now()),
     );
   }
 
@@ -596,9 +596,9 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       !this.system &&
-        (!this.guild ||
-          (channel?.viewable &&
-            channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
+      (!this.guild ||
+        (channel?.viewable &&
+          channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
     );
   }
 
@@ -627,10 +627,10 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       channel?.type === ChannelType.GuildNews &&
-        !this.flags.has(MessageFlags.Crossposted) &&
-        this.type === MessageType.Default &&
-        channel.viewable &&
-        channel.permissionsFor(this.client.user)?.has(bitfield, false),
+      !this.flags.has(MessageFlags.Crossposted) &&
+      this.type === MessageType.Default &&
+      channel.viewable &&
+      channel.permissionsFor(this.client.user)?.has(bitfield, false),
     );
   }
 
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 7567a05284f7a2aafd5ef698e75621256c922a56..47c52c13986985daa68533360f8902d0a125b49d 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -386,17 +386,15 @@ export interface InteractionResponseFields<Cached extends CacheType = CacheType>
   replied: boolean;
   webhook: InteractionWebhook;
   reply(options: InteractionReplyOptions & { fetchReply: true }): Promise<GuildCacheMessage<Cached>>;
-  reply(options: string | MessagePayload | InteractionReplyOptions): Promise<void>;
+  reply(
+    options: string | MessagePayload | InteractionReplyOptions,
+  ): Promise<InteractionResponse<BooleanCache<Cached>>>;
   deleteReply(): Promise<void>;
   editReply(options: string | MessagePayload | WebhookEditMessageOptions): Promise<GuildCacheMessage<Cached>>;
   deferReply(options: InteractionDeferReplyOptions & { fetchReply: true }): Promise<GuildCacheMessage<Cached>>;
-  deferReply(options?: InteractionDeferReplyOptions): Promise<void>;
+  deferReply(options?: InteractionDeferReplyOptions): Promise<InteractionResponse<BooleanCache<Cached>>>;
   fetchReply(): Promise<GuildCacheMessage<Cached>>;
   followUp(options: string | MessagePayload | InteractionReplyOptions): Promise<GuildCacheMessage<Cached>>;
-  showModal(
-    modal: JSONEncodable<APIModalInteractionResponseCallbackData> | ModalData | APIModalInteractionResponseCallbackData,
-  ): Promise<void>;
-  awaitModalSubmit(options: AwaitModalSubmitOptions<ModalSubmitInteraction>): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export type BooleanCache<T extends CacheType> = T extends 'cached' ? true : false;
@@ -1479,7 +1477,7 @@ export class IntentsBitField extends BitField<GatewayIntentsString> {
   public static resolve(bit?: BitFieldResolvable<GatewayIntentsString, number>): number;
 }
 
-export type CacheType = 'cached' | 'raw' | undefined;
+export type CacheType = 'cached' | 'raw' | 'DM' | 'cachedOrDM' | undefined;
 
 export type CacheTypeReducer<
   State extends CacheType,
@@ -1487,12 +1485,18 @@ export type CacheTypeReducer<
   RawType = CachedType,
   PresentType = CachedType | RawType,
   Fallback = PresentType | null,
+  DMType = CachedType,
+  CachedOrDMType = CachedType | DMType,
 > = [State] extends ['cached']
   ? CachedType
   : [State] extends ['raw']
   ? RawType
   : [State] extends ['raw' | 'cached']
   ? PresentType
+  : [State] extends ['DM']
+  ? DMType
+  : [State] extends ['cachedOrDM']
+  ? CachedOrDMType
   : Fallback;
 
 export class Interaction<Cached extends CacheType = CacheType> extends Base {
@@ -1505,7 +1509,8 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
-    TextBasedChannel | null
+    TextBasedChannel | null,
+    DMChannel | null
   >;
   public channelId: Snowflake | null;
   public get createdAt(): Date;
@@ -1513,7 +1518,7 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
   public get guild(): CacheTypeReducer<Cached, Guild, null>;
   public guildId: CacheTypeReducer<Cached, Snowflake>;
   public id: Snowflake;
-  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember>;
+  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember, GuildMember | APIInteractionGuildMember | null, null>;
   public readonly token: string;
   public type: InteractionType;
   public user: User;
@@ -1804,7 +1809,7 @@ export class MessageComponentInteraction<Cached extends CacheType = CacheType> e
   public showModal(
     modal: JSONEncodable<APIModalInteractionResponseCallbackData> | ModalData | APIModalInteractionResponseCallbackData,
   ): Promise<void>;
-  public awaitModalSubmit(options: AwaitModalSubmitOptions<ModalSubmitInteraction>): Promise<ModalSubmitInteraction>;
+  public awaitModalSubmit(options: AwaitModalSubmitOptions<ModalSubmitInteraction>): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export class MessageContextMenuCommandInteraction<
