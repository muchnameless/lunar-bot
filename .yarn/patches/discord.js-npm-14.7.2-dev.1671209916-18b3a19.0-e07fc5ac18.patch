diff --git a/src/client/websocket/WebSocketManager.js b/src/client/websocket/WebSocketManager.js
index f96cdf12e5affd4fd0582ebb8cffbe5f55169172..3fdaa28dcae622316ed1d2a3173db02b1ba6bff6 100644
--- a/src/client/websocket/WebSocketManager.js
+++ b/src/client/websocket/WebSocketManager.js
@@ -345,7 +345,7 @@ class WebSocketManager extends EventEmitter {
       const item = this.packetQueue.shift();
       setImmediate(() => {
         this.handlePacket(item.packet, item.shard);
-      }).unref();
+      });
     }
 
     if (packet && PacketHandlers[packet.t]) {
diff --git a/src/client/websocket/WebSocketShard.js b/src/client/websocket/WebSocketShard.js
index 167cd7badb7203809539c73958f26042beac4284..d2de37ef969ce8e417635a38f7186e4bb27a0ef3 100644
--- a/src/client/websocket/WebSocketShard.js
+++ b/src/client/websocket/WebSocketShard.js
@@ -277,6 +277,7 @@ class WebSocketShard extends EventEmitter {
       this.status = this.status === Status.Disconnected ? Status.Reconnecting : Status.Connecting;
       this.setHelloTimeout();
 
+      this.setWsCloseTimeout(-1);
       this.connectedAt = Date.now();
 
       // Adding a handshake timeout to just make sure no zombie connection appears.
@@ -544,7 +545,7 @@ class WebSocketShard extends EventEmitter {
         this.emit(WebSocketShardEvents.AllReady, this.expectedGuilds);
       },
       hasGuildsIntent ? waitGuildTimeout : 0,
-    ).unref();
+    );
   }
 
   /**
@@ -565,7 +566,7 @@ class WebSocketShard extends EventEmitter {
     this.helloTimeout = setTimeout(() => {
       this.debug('Did not receive HELLO in time. Destroying and connecting again.');
       this.destroy({ reset: true, closeCode: 4009 });
-    }, 20_000).unref();
+    }, 20_000);
   }
 
   /**
@@ -608,7 +609,7 @@ class WebSocketShard extends EventEmitter {
       this.emitClose();
       // Setting the variable false to check for zombie connections.
       this.closeEmitted = false;
-    }, time).unref();
+    }, time);
   }
 
   /**
@@ -628,7 +629,7 @@ class WebSocketShard extends EventEmitter {
     this.debug(`Setting a heartbeat interval for ${time}ms.`);
     // Sanity checks
     if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);
-    this.heartbeatInterval = setInterval(() => this.sendHeartbeat(), time).unref();
+    this.heartbeatInterval = setInterval(() => this.sendHeartbeat(), time);
   }
 
   /**
@@ -779,7 +780,7 @@ class WebSocketShard extends EventEmitter {
       this.ratelimit.timer = setTimeout(() => {
         this.ratelimit.remaining = this.ratelimit.total;
         this.processQueue();
-      }, this.ratelimit.time).unref();
+      }, this.ratelimit.time);
     }
     while (this.ratelimit.remaining > 0) {
       const item = this.ratelimit.queue.shift();
diff --git a/src/errors/ErrorCodes.js b/src/errors/ErrorCodes.js
index b5faf0c1cefaf1c3f779ab5a63dec4e8d141dc27..9ec36057baaf56066a8ae00f0942d343878e3a81 100644
--- a/src/errors/ErrorCodes.js
+++ b/src/errors/ErrorCodes.js
@@ -274,7 +274,6 @@ const keys = [
 
   'InteractionAlreadyReplied',
   'InteractionNotReplied',
-  'InteractionEphemeralReplied',
 
   'CommandInteractionOptionNotFound',
   'CommandInteractionOptionType',
diff --git a/src/errors/Messages.js b/src/errors/Messages.js
index 24437b5023c97d1ba679a8e092a800ddeb6106e2..fe20d71fd253fc487d5c80a127c7072449a640f4 100644
--- a/src/errors/Messages.js
+++ b/src/errors/Messages.js
@@ -136,7 +136,6 @@ const Messages = {
 
   [DjsErrorCodes.InteractionAlreadyReplied]: 'The reply to this interaction has already been sent or deferred.',
   [DjsErrorCodes.InteractionNotReplied]: 'The reply to this interaction has not been sent or deferred.',
-  [DjsErrorCodes.InteractionEphemeralReplied]: 'Ephemeral responses cannot be deleted.',
 
   [DjsErrorCodes.CommandInteractionOptionNotFound]: name => `Required option "${name}" not found.`,
   [DjsErrorCodes.CommandInteractionOptionType]: (name, type, expected) =>
diff --git a/src/managers/GuildManager.js b/src/managers/GuildManager.js
index cf5137392e42e73e28c36553a3257cc9986ec69e..36917cdbc173013c27d7121950684291bc61ba7b 100644
--- a/src/managers/GuildManager.js
+++ b/src/managers/GuildManager.js
@@ -237,7 +237,7 @@ class GuildManager extends CachedManager {
         this.client.removeListener(Events.GuildCreate, handleGuild);
         this.client.decrementMaxListeners();
         resolve(this.client.guilds._add(data));
-      }, 10_000).unref();
+      }, 10_000);
     });
   }
 
diff --git a/src/managers/GuildMemberManager.js b/src/managers/GuildMemberManager.js
index 704cd56b6cdbef47fac20733d95713a9f8e3f50c..e22c4a77e2fbf0d3e2dc9f06a03227f9064be44d 100644
--- a/src/managers/GuildMemberManager.js
+++ b/src/managers/GuildMemberManager.js
@@ -534,7 +534,7 @@ class GuildMemberManager extends CachedManager {
         this.client.removeListener(Events.GuildMembersChunk, handler);
         this.client.decrementMaxListeners();
         reject(new DiscordjsError(ErrorCodes.GuildMembersTimeout));
-      }, time).unref();
+      }, time);
       this.client.incrementMaxListeners();
       this.client.on(Events.GuildMembersChunk, handler);
     });
diff --git a/src/structures/AttachmentBuilder.js b/src/structures/AttachmentBuilder.js
index e2e7cf5179cd1250aedf0d7cf51b044daecab703..350b88a0dec297aad9637cf1c3ebe8e1350d92fc 100644
--- a/src/structures/AttachmentBuilder.js
+++ b/src/structures/AttachmentBuilder.js
@@ -1,16 +1,16 @@
 'use strict';
 
-const { basename, flatten } = require('../util/Util');
+const { isJSONEncodable } = require('@discordjs/builders');
+const { basename } = require('../util/Util');
 
 /**
  * Represents an attachment builder
  */
 class AttachmentBuilder {
   /**
-   * @param {BufferResolvable|Stream} attachment The file
-   * @param {AttachmentData} [data] Extra data
+   * @param {AttachmentPayload} [payload] Attachment and extra data
    */
-  constructor(attachment, data = {}) {
+  constructor({ attachment, name, description } = {}) {
     /**
      * The file associated with this attachment.
      * @type {BufferResolvable|Stream}
@@ -20,12 +20,12 @@ class AttachmentBuilder {
      * The name of this attachment
      * @type {?string}
      */
-    this.name = data.name;
+    this.name = name;
     /**
      * The description of the attachment
      * @type {?string}
      */
-    this.description = data.description;
+    this.description = description;
   }
 
   /**
@@ -82,11 +82,11 @@ class AttachmentBuilder {
    * @readonly
    */
   get spoiler() {
-    return basename(this.name).startsWith('SPOILER_');
+    return this.name ? basename(this.name).startsWith('SPOILER_') : false;
   }
 
   toJSON() {
-    return flatten(this);
+    return { ...this };
   }
 
   /**
@@ -95,10 +95,10 @@ class AttachmentBuilder {
    * @returns {AttachmentBuilder}
    */
   static from(other) {
-    return new AttachmentBuilder(other.attachment, {
-      name: other.name,
-      description: other.description,
-    });
+    if (isJSONEncodable(other)) {
+      return new this(other.toJSON());
+    }
+    return new this(other);
   }
 }
 
diff --git a/src/structures/Embed.js b/src/structures/Embed.js
index dd68120d955b53019d973f03057740d52f814fe0..5436e854c18807335adef1613b8da974b6de3acc 100644
--- a/src/structures/Embed.js
+++ b/src/structures/Embed.js
@@ -18,11 +18,11 @@ class Embed {
 
   /**
    * An array of fields of this embed.
-   * @type {Array<APIEmbedField>}
+   * @type {?Array<APIEmbedField>}
    * @readonly
    */
   get fields() {
-    return this.data.fields ?? [];
+    return this.data.fields ?? null;
   }
 
   /**
diff --git a/src/structures/GuildEmoji.js b/src/structures/GuildEmoji.js
index f3bf22dcb496dc563aef7e5a987024ee7eb3767e..efddf66a7d5107c29224496f132c3abe8f6e787a 100644
--- a/src/structures/GuildEmoji.js
+++ b/src/structures/GuildEmoji.js
@@ -55,8 +55,9 @@ class GuildEmoji extends BaseGuildEmoji {
    * @readonly
    */
   get deletable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
-    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
+    const { me } = this.guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    return !this.managed && me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
   }
 
   /**
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index e4f953a974eb47ae911f25f84a330a0949589346..c07149681572d2b7b36ded097ba5ffcf6f2a86ab 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -248,8 +248,9 @@ class GuildMember extends Base {
     if (this.user.id === this.guild.ownerId) return false;
     if (this.user.id === this.client.user.id) return false;
     if (this.client.user.id === this.guild.ownerId) return true;
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
-    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
+    const { me } = this.guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    return me.roles.highest.comparePositionTo(this.roles.highest) > 0;
   }
 
   /**
@@ -258,7 +259,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get kickable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);
   }
 
@@ -268,7 +268,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get bannable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);
   }
 
@@ -281,7 +280,7 @@ class GuildMember extends Base {
     return (
       !this.permissions.has(PermissionFlagsBits.Administrator) &&
       this.manageable &&
-      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
+      this.guild.members.me.permissions.has(PermissionFlagsBits.ModerateMembers)
     );
   }
 
diff --git a/src/structures/GuildTemplate.js b/src/structures/GuildTemplate.js
index c1e219b5e2a0685deb3d46ba5b421cab2393b863..6f71745b51397fbad827916f14c25e4620f79077 100644
--- a/src/structures/GuildTemplate.js
+++ b/src/structures/GuildTemplate.js
@@ -149,7 +149,7 @@ class GuildTemplate extends Base {
       client.incrementMaxListeners();
       client.on(Events.GuildCreate, handleGuild);
 
-      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();
+      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000);
     });
   }
 
diff --git a/src/structures/Invite.js b/src/structures/Invite.js
index 19014ff6954351e79f7a2905c00e6023ff9a2f15..dcba2015c5cb3626c10b075b35cf44489054c089 100644
--- a/src/structures/Invite.js
+++ b/src/structures/Invite.js
@@ -234,10 +234,11 @@ class Invite extends Base {
   get deletable() {
     const guild = this.guild;
     if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
-    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    const { me } = guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return Boolean(
       this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
-        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),
+        me.permissions.has(PermissionFlagsBits.ManageGuild),
     );
   }
 
diff --git a/src/structures/Message.js b/src/structures/Message.js
index dd5a4b6ff12e8c1332a7d57cf2cafacb79df16d5..87ed5652af6a0bf081e7b9631f967c9796350dfa 100644
--- a/src/structures/Message.js
+++ b/src/structures/Message.js
@@ -295,10 +295,13 @@ class Message extends Base {
       this.client.channels._add(data.thread, this.guild);
     }
 
-    if (this.member && data.member) {
-      this.member._patch(data.member);
-    } else if (data.member && this.guild && this.author) {
-      this.guild.members._add(Object.assign(data.member, { user: this.author }));
+    if (data.member) {
+      const { member } = this;
+      if (member) {
+        member._patch(data.member);
+      } else if (this.author) {
+        this.guild?.members._add(Object.assign(data.member, { user: this.author }));
+      }
     }
 
     if ('flags' in data) {
@@ -576,11 +579,16 @@ class Message extends Base {
    * @readonly
    */
   get editable() {
-    const precheck = Boolean(this.author.id === this.client.user.id && (!this.guild || this.channel?.viewable));
+    const { channel } = this;
+    const precheck = Boolean(
+      this.author.id === this.client.user.id &&
+        !this.flags.has(MessageFlags.Ephemeral) &&
+        (!this.guildId || channel?.viewable),
+    );
     // Regardless of permissions thread messages cannot be edited if
     // the thread is locked.
-    if (this.channel?.isThread()) {
-      return precheck && !this.channel.locked;
+    if (channel?.isThread()) {
+      return precheck && !channel.locked;
     }
     return precheck;
   }
@@ -591,15 +599,19 @@ class Message extends Base {
    * @readonly
    */
   get deletable() {
-    if (!this.guild) {
+    if (this.flags.has(MessageFlags.Ephemeral)) {
+      return false;
+    }
+    if (!this.guildId) {
       return this.author.id === this.client.user.id;
     }
     // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.
-    if (!this.channel?.viewable) {
+    const { channel } = this;
+    if (!channel?.viewable) {
       return false;
     }
 
-    const permissions = this.channel?.permissionsFor(this.client.user);
+    const permissions = channel?.permissionsFor(this.client.user);
     if (!permissions) return false;
     // This flag allows deleting even if timed out
     if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;
@@ -639,7 +651,8 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       !this.system &&
-        (!this.guild ||
+        !this.flags.has(MessageFlags.Ephemeral) &&
+        (!this.guildId ||
           (channel?.viewable &&
             channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
     );
@@ -670,7 +683,7 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       channel?.type === ChannelType.GuildAnnouncement &&
-        !this.flags.has(MessageFlags.Crossposted) &&
+        !this.flags.any(MessageFlags.Crossposted | MessageFlags.Ephemeral) &&
         this.type === MessageType.Default &&
         channel.viewable &&
         channel.permissionsFor(this.client.user)?.has(bitfield, false),
@@ -688,8 +701,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   edit(options) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.edit(this, options);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.edit(this, options);
   }
 
   /**
@@ -704,8 +718,9 @@ class Message extends Base {
    * }
    */
   crosspost() {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.crosspost(this.id);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.crosspost(this.id);
   }
 
   /**
@@ -719,8 +734,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async pin(reason) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.pin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.pin(this.id, reason);
     return this;
   }
 
@@ -735,8 +751,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async unpin(reason) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.unpin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.unpin(this.id, reason);
     return this;
   }
 
@@ -756,13 +773,14 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async react(emoji) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.react(this.id, emoji);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.react(this.id, emoji);
 
     return this.client.actions.MessageReactionAdd.handle(
       {
         user: this.client.user,
-        channel: this.channel,
+        channel,
         message: this,
         emoji: resolvePartialEmoji(emoji),
       },
@@ -780,8 +798,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async delete() {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.delete(this.id);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.delete(this.id);
     return this;
   }
 
@@ -804,7 +823,8 @@ class Message extends Base {
    *   .catch(console.error);
    */
   reply(options) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
     let data;
 
     if (options instanceof MessagePayload) {
@@ -817,7 +837,7 @@ class Message extends Base {
         },
       });
     }
-    return this.channel.send(data);
+    return channel.send(data);
   }
 
   /**
@@ -837,12 +857,13 @@ class Message extends Base {
    * @returns {Promise<ThreadChannel>}
    */
   startThread(options = {}) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(this.channel.type)) {
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(channel.type)) {
       return Promise.reject(new DiscordjsError(ErrorCodes.MessageThreadParent));
     }
     if (this.hasThread) return Promise.reject(new DiscordjsError(ErrorCodes.MessageExistingThread));
-    return this.channel.threads.create({ ...options, startMessage: this });
+    return channel.threads.create({ ...options, startMessage: this });
   }
 
   /**
@@ -851,8 +872,9 @@ class Message extends Base {
    * @returns {Promise<Message>}
    */
   fetch(force = true) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.fetch({ message: this.id, force });
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.fetch({ message: this.id, force });
   }
 
   /**
diff --git a/src/structures/MessagePayload.js b/src/structures/MessagePayload.js
index 57a3a7139066414bf6ef732ccdbf06bb24eb923b..9caf296bffaf38ff56cd14c152db2d8eb3c153be 100644
--- a/src/structures/MessagePayload.js
+++ b/src/structures/MessagePayload.js
@@ -4,7 +4,6 @@ const { Buffer } = require('node:buffer');
 const { isJSONEncodable } = require('@discordjs/builders');
 const { lazy } = require('@discordjs/util');
 const { MessageFlags } = require('discord-api-types/v10');
-const ActionRowBuilder = require('./ActionRowBuilder');
 const { DiscordjsRangeError, ErrorCodes } = require('../errors');
 const DataResolver = require('../util/DataResolver');
 const MessageFlagsBitField = require('../util/MessageFlagsBitField');
@@ -134,7 +133,9 @@ class MessagePayload {
       }
     }
 
-    const components = this.options.components?.map(c => (isJSONEncodable(c) ? c : new ActionRowBuilder(c)).toJSON());
+    const components = this.options.components?.map(c =>
+      isJSONEncodable(c) ? c.toJSON() : this.target.client.options.jsonTransformer(c),
+    );
 
     let username;
     let avatarURL;
@@ -220,9 +221,9 @@ class MessagePayload {
    * @returns {Promise<MessagePayload>}
    */
   async resolveFiles() {
-    if (this.files) return this;
+    if (this.files || !this.options.files) return this;
 
-    this.files = await Promise.all(this.options.files?.map(file => this.constructor.resolveFile(file)) ?? []);
+    this.files = await Promise.all(this.options.files.map(file => this.constructor.resolveFile(file)));
     return this;
   }
 
diff --git a/src/structures/ModalSubmitFields.js b/src/structures/ModalSubmitFields.js
index ac2a72fbcaef21a51abf13ee03eb26929b59ea0f..528f5ca4cc0e423ceefa8ac9c1f1f64d934899c7 100644
--- a/src/structures/ModalSubmitFields.js
+++ b/src/structures/ModalSubmitFields.js
@@ -50,6 +50,15 @@ class ModalSubmitFields {
   getTextInputValue(customId) {
     return this.getField(customId, ComponentType.TextInput).value;
   }
+
+  /**
+   * Gets the values of a select menu component given a custom id
+   * @param {string} customId The custom id for the select menu component
+   * @returns {string[]}
+   */
+  getSelectMenuValues(customId) {
+    return this.getField(customId, ComponentType.SelectMenu).values;
+  }
 }
 
 module.exports = ModalSubmitFields;
diff --git a/src/structures/interfaces/Collector.js b/src/structures/interfaces/Collector.js
index bcd7528a6c079cc226e437e28effea87584e224a..95801d20a2e3c21ee7cc4f58e6f2c53cbcd28f26 100644
--- a/src/structures/interfaces/Collector.js
+++ b/src/structures/interfaces/Collector.js
@@ -93,8 +93,8 @@ class Collector extends EventEmitter {
     this.handleCollect = this.handleCollect.bind(this);
     this.handleDispose = this.handleDispose.bind(this);
 
-    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time).unref();
-    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle).unref();
+    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time);
+    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle);
   }
 
   /**
@@ -120,7 +120,7 @@ class Collector extends EventEmitter {
 
         if (this._idletimeout) {
           clearTimeout(this._idletimeout);
-          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle).unref();
+          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle);
         }
       } else {
         /**
@@ -232,11 +232,11 @@ class Collector extends EventEmitter {
   resetTimer({ time, idle } = {}) {
     if (this._timeout) {
       clearTimeout(this._timeout);
-      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time).unref();
+      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time);
     }
     if (this._idletimeout) {
       clearTimeout(this._idletimeout);
-      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle).unref();
+      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle);
     }
   }
 
diff --git a/src/util/Sweepers.js b/src/util/Sweepers.js
index 7796ddc99a96d7c431052895c2c0a9d4c23a6790..eb0c680121aed6bde625f7d4da0fac8b147e063d 100644
--- a/src/util/Sweepers.js
+++ b/src/util/Sweepers.js
@@ -460,7 +460,7 @@ class Sweepers {
       if (sweepFn === null) return;
       if (typeof sweepFn !== 'function') throw new DiscordjsTypeError(ErrorCodes.SweepFilterReturn);
       this[sweepKey](sweepFn);
-    }, opts.interval * 1_000).unref();
+    }, opts.interval * 1_000);
   }
 }
 
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 6f758eecbaa4c00bcd546ef0b9c7ee4cc50e57f8..354859c7105f61932f737870004615bf09d74116 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -1,6 +1,3 @@
-// DOM types required for undici
-/// <reference lib="dom" />
-
 import {
   ActionRowBuilder as BuilderActionRow,
   MessageActionRowComponentBuilder,
@@ -288,11 +285,11 @@ export class ActionRowBuilder<T extends AnyComponentBuilder = AnyComponentBuilde
       | APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>
     >,
   );
-  public static from(
+  public static from<T extends AnyComponentBuilder = AnyComponentBuilder>(
     other:
-      | JSONEncodable<APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>>
-      | APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>,
-  ): ActionRowBuilder;
+      | JSONEncodable<APIActionRowComponent<ReturnType<T['toJSON']>>>
+      | APIActionRowComponent<ReturnType<T['toJSON']>>,
+  ): ActionRowBuilder<T>;
 }
 
 export type MessageActionRowComponent =
@@ -302,7 +299,13 @@ export type MessageActionRowComponent =
   | RoleSelectMenuComponent
   | MentionableSelectMenuComponent
   | ChannelSelectMenuComponent;
-export type ModalActionRowComponent = TextInputComponent;
+export type ModalActionRowComponent =
+  | TextInputComponent
+  | StringSelectMenuComponent
+  | UserSelectMenuComponent
+  | RoleSelectMenuComponent
+  | MentionableSelectMenuComponent
+  | ChannelSelectMenuComponent;
 
 export class ActionRow<T extends MessageActionRowComponent | ModalActionRowComponent> extends Component<
   APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>
@@ -654,6 +657,7 @@ export class ButtonInteraction<Cached extends CacheType = CacheType> extends Mes
     ButtonComponent,
     APIButtonComponent,
     ButtonComponent | APIButtonComponent,
+    ButtonComponent | APIButtonComponent,
     ButtonComponent | APIButtonComponent
   >;
   public inGuild(): this is ButtonInteraction<'raw' | 'cached'>;
@@ -819,7 +823,7 @@ export class EmbedBuilder extends BuildersEmbed {
 export class Embed {
   private constructor(data: APIEmbed);
   public readonly data: Readonly<APIEmbed>;
-  public get fields(): APIEmbedField[];
+  public get fields(): APIEmbedField[] | null;
   public get footer(): EmbedFooterData | null;
   public get title(): string | null;
   public get description(): string | null;
@@ -1616,7 +1620,7 @@ export class IntentsBitField extends BitField<GatewayIntentsString> {
   public static resolve(bit?: BitFieldResolvable<GatewayIntentsString, number>): number;
 }
 
-export type CacheType = 'cached' | 'raw' | undefined;
+export type CacheType = 'cached' | 'raw' | 'DM' | 'cachedOrDM' | undefined;
 
 export type CacheTypeReducer<
   State extends CacheType,
@@ -1624,12 +1628,18 @@ export type CacheTypeReducer<
   RawType = CachedType,
   PresentType = CachedType | RawType,
   Fallback = PresentType | null,
+  DMType = null,
+  CachedOrDMType = CachedType | DMType,
 > = [State] extends ['cached']
   ? CachedType
   : [State] extends ['raw']
   ? RawType
   : [State] extends ['raw' | 'cached']
   ? PresentType
+  : [State] extends ['DM']
+  ? DMType
+  : [State] extends ['cachedOrDM']
+  ? CachedOrDMType
   : Fallback;
 
 export type Interaction<Cached extends CacheType = CacheType> =
@@ -1656,7 +1666,8 @@ export class BaseInteraction<Cached extends CacheType = CacheType> extends Base
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
-    TextBasedChannel | null
+    TextBasedChannel | null,
+    DMChannel | null
   >;
   public channelId: Snowflake | null;
   public get createdAt(): Date;
@@ -1909,16 +1920,16 @@ export class Message<InGuild extends boolean = boolean> extends Base {
 }
 
 export class AttachmentBuilder {
-  public constructor(attachment: BufferResolvable | Stream, data?: AttachmentData);
+  public constructor(data?: Partial<AttachmentPayload>);
   public attachment: BufferResolvable | Stream;
   public description: string | null;
   public name: string | null;
   public get spoiler(): boolean;
   public setDescription(description: string): this;
-  public setFile(attachment: BufferResolvable | Stream, name?: string): this;
+  public setFile(attachment: BufferResolvable | Stream): this;
   public setName(name: string): this;
   public setSpoiler(spoiler?: boolean): this;
-  public toJSON(): unknown;
+  public toJSON(): AttachmentPayload;
   public static from(other: JSONEncodable<AttachmentPayload>): AttachmentBuilder;
 }
 
@@ -1960,6 +1971,7 @@ export class MessageComponentInteraction<Cached extends CacheType = CacheType> e
     MessageActionRowComponent,
     Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
     MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
+    MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
     MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>
   >;
   public componentType: Exclude<ComponentType, ComponentType.ActionRow | ComponentType.TextInput>;
@@ -2127,12 +2139,17 @@ export interface TextInputModalData extends BaseModalData {
   value: string;
 }
 
+export interface SelectMenuModalData extends BaseModalData {
+  type: ComponentType.SelectMenu;
+  values: string[];
+}
+
 export interface ActionRowModalData {
   type: ComponentType.ActionRow;
   components: ModalData[];
 }
 
-export type ModalData = TextInputModalData | ActionRowModalData;
+export type ModalData = ActionRowModalData | TextInputModalData | SelectMenuModalData;
 
 export class ModalSubmitFields {
   constructor(components: ModalActionRowComponent[][]);
@@ -2141,6 +2158,7 @@ export class ModalSubmitFields {
   public getField<T extends ComponentType>(customId: string, type: T): { type: T } & ModalData;
   public getField(customId: string, type?: ComponentType): ModalData;
   public getTextInputValue(customId: string): string;
+  public getSelectMenuValues(customId: string): string[];
 }
 
 export interface ModalMessageModalSubmitInteraction<Cached extends CacheType = CacheType>
@@ -2416,6 +2434,7 @@ export class StringSelectMenuInteraction<
     StringSelectMenuComponent,
     APIStringSelectComponent,
     StringSelectMenuComponent | APIStringSelectComponent,
+    StringSelectMenuComponent | APIStringSelectComponent,
     StringSelectMenuComponent | APIStringSelectComponent
   >;
   public componentType: ComponentType.StringSelect;
@@ -3660,7 +3679,7 @@ export class ApplicationCommandPermissionsManager<
     },
   ): Promise<boolean>;
   public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
-  public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
+  public fetch(options?: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
   public remove(
     options:
       | (FetchSingleOptions & {
@@ -4176,11 +4195,6 @@ export interface BaseApplicationCommandData {
   nsfw?: boolean;
 }
 
-export interface AttachmentData {
-  name?: string;
-  description?: string;
-}
-
 export type CommandOptionDataTypeResolvable = ApplicationCommandOptionType;
 
 export type CommandOptionChannelResolvableType = ApplicationCommandOptionType.Channel;
@@ -5699,14 +5713,7 @@ export interface BaseMessageOptions {
   content?: string;
   embeds?: (JSONEncodable<APIEmbed> | APIEmbed)[];
   allowedMentions?: MessageMentionOptions;
-  files?: (
-    | BufferResolvable
-    | Stream
-    | JSONEncodable<APIAttachment>
-    | Attachment
-    | AttachmentBuilder
-    | AttachmentPayload
-  )[];
+  files?: (BufferResolvable | Stream | AttachmentPayload | JSONEncodable<AttachmentPayload>)[];
   components?: (
     | JSONEncodable<APIActionRowComponent<APIMessageActionRowComponent>>
     | ActionRowData<MessageActionRowComponentData | MessageActionRowComponentBuilder>
