diff --git a/dist/defaultWorker.js b/dist/defaultWorker.js
index b4171ca65e66a112e5cb3e037e2e27a5621ec648..19a9fc08520cff47733db834362daf49d3785a24 100644
--- a/dist/defaultWorker.js
+++ b/dist/defaultWorker.js
@@ -523,7 +523,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/defaultWorker.mjs b/dist/defaultWorker.mjs
index c1f8ee104ac28e868f7ea250adb458a077ed119e..21343d41699be35fe5cee3016228fd96c73f033b 100644
--- a/dist/defaultWorker.mjs
+++ b/dist/defaultWorker.mjs
@@ -505,7 +505,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/index.js b/dist/index.js
index a1de2bf7b359c3aff8b5310028e393fa9d7a58fc..ee90b0357cd0fecd188d9cec8acc7add24a3d918 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -751,7 +751,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/index.mjs b/dist/index.mjs
index 57c56d8a7d57870b549e763b99d9fbdbe3cf2f0a..3bb90474a66975dee226283df610b326a3646600 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -714,7 +714,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
