diff --git a/dist/cjs/index.cjs b/dist/cjs/index.cjs
index c017c9cc8bffe364c662f59a1d56b76f1f7f5a0e..7678d9ae15a4b988817d80ee76d4975eda88a8a3 100644
--- a/dist/cjs/index.cjs
+++ b/dist/cjs/index.cjs
@@ -21,12 +21,11 @@ var _AsyncQueueEntry = class _AsyncQueueEntry {
     });
   }
   setSignal(signal) {
-    if (signal.aborted) return this;
     this.signal = signal;
     this.signalListener = () => {
       const index = this.queue["promises"].indexOf(this);
       if (index !== -1) this.queue["promises"].splice(index, 1);
-      this.reject(new Error("Request aborted manually"));
+      this.reject(new Error("Request aborted manually", { cause: this.signal.reason }));
     };
     this.signal.addEventListener("abort", this.signalListener);
     return this;
@@ -96,6 +95,9 @@ var _AsyncQueue = class _AsyncQueue {
    * ```
    */
   wait(options) {
+    if (options?.signal?.aborted) {
+      return Promise.reject(new Error("Request aborted manually", { cause: options.signal.reason }));
+    }
     const entry = new AsyncQueueEntry(this);
     if (this.promises.length === 0) {
       this.promises.push(entry);
diff --git a/dist/esm/index.mjs b/dist/esm/index.mjs
index d38c29b37ecfbc069920397bbccfe7c9ba9c5cc8..47adcc7573ab50a99ec7d795e0b9959b3e1176db 100644
--- a/dist/esm/index.mjs
+++ b/dist/esm/index.mjs
@@ -19,12 +19,11 @@ var _AsyncQueueEntry = class _AsyncQueueEntry {
     });
   }
   setSignal(signal) {
-    if (signal.aborted) return this;
     this.signal = signal;
     this.signalListener = () => {
       const index = this.queue["promises"].indexOf(this);
       if (index !== -1) this.queue["promises"].splice(index, 1);
-      this.reject(new Error("Request aborted manually"));
+      this.reject(new Error("Request aborted manually", { cause: this.signal.reason }));
     };
     this.signal.addEventListener("abort", this.signalListener);
     return this;
@@ -94,6 +93,9 @@ var _AsyncQueue = class _AsyncQueue {
    * ```
    */
   wait(options) {
+    if (options?.signal?.aborted) {
+      return Promise.reject(new Error("Request aborted manually", { cause: options.signal.reason }));
+    }
     const entry = new AsyncQueueEntry(this);
     if (this.promises.length === 0) {
       this.promises.push(entry);
diff --git a/dist/iife/index.global.js b/dist/iife/index.global.js
index acc57ed8a7cfbb00907ed093fc1120d4a6f7cd23..a066dc8aca7eeadbd3471b12bde9ba5df27652cb 100644
--- a/dist/iife/index.global.js
+++ b/dist/iife/index.global.js
@@ -22,12 +22,11 @@ var SapphireAsyncQueue = (function (exports) {
       });
     }
     setSignal(signal) {
-      if (signal.aborted) return this;
       this.signal = signal;
       this.signalListener = () => {
         const index = this.queue["promises"].indexOf(this);
         if (index !== -1) this.queue["promises"].splice(index, 1);
-        this.reject(new Error("Request aborted manually"));
+        this.reject(new Error("Request aborted manually", { cause: this.signal.reason }));
       };
       this.signal.addEventListener("abort", this.signalListener);
       return this;
@@ -97,6 +96,9 @@ var SapphireAsyncQueue = (function (exports) {
      * ```
      */
     wait(options) {
+      if (options?.signal?.aborted) {
+        return Promise.reject(new Error("Request aborted manually", { cause: options.signal.reason }));
+      }
       const entry = new AsyncQueueEntry(this);
       if (this.promises.length === 0) {
         this.promises.push(entry);
