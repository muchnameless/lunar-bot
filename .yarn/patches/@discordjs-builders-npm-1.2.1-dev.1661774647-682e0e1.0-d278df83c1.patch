diff --git a/dist/components/ActionRow.cjs.map b/dist/components/ActionRow.cjs.map
index 691b94e2b9aa8c1e6a3f5f50e2263d6974024142..4f74d72c583d35a2459ef7ebdae09c312df73114 100644
--- a/dist/components/ActionRow.cjs.map
+++ b/dist/components/ActionRow.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"ActionRow.cjs","sources":["../../src/components/ActionRow.ts"],"sourcesContent":["import {\n\ttype APIActionRowComponent,\n\tComponentType,\n\tAPIMessageActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from './Component';\nimport { createComponentBuilder } from './Components';\nimport type { ButtonBuilder } from './button/Button';\nimport type { SelectMenuBuilder } from './selectMenu/SelectMenu';\nimport type { TextInputBuilder } from './textInput/TextInput';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray';\n\nexport type MessageComponentBuilder =\n\t| MessageActionRowComponentBuilder\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>;\nexport type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;\nexport type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n"],"names":["ComponentBuilder","ComponentType","createComponentBuilder","normalizeArray"],"mappings":";;;;;;;;;AAMO,MAAM,gBAAgB,SAASA,0BAAgB,CAAC;AACvD,EAAE,WAAW,CAAC,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AAC5C,IAAI,KAAK,CAAC,EAAE,IAAI,EAAEC,iBAAa,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AACtD,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,KAAKC,iCAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC9E,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAGC,6BAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAGA,6BAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACrF,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,MAAM,GAAG;AACX,IAAI,OAAO;AACX,MAAM,GAAG,IAAI,CAAC,IAAI;AAClB,MAAM,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE,CAAC;AACxE,KAAK,CAAC;AACN,GAAG;AACH;;;;"}
\ No newline at end of file
+{"version":3,"file":"ActionRow.cjs","sources":["../../src/components/ActionRow.ts"],"sourcesContent":["import {\n\ttype APIActionRowComponent,\n\tComponentType,\n\tAPIMessageActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from './Component';\nimport { createComponentBuilder } from './Components';\nimport type { ButtonBuilder } from './button/Button';\nimport type { SelectMenuBuilder } from './selectMenu/SelectMenu';\nimport type { TextInputBuilder } from './textInput/TextInput';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray';\n\nexport type MessageComponentBuilder =\n\t| MessageActionRowComponentBuilder\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>;\nexport type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;\nexport type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder | SelectMenuBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n"],"names":["ComponentBuilder","ComponentType","createComponentBuilder","normalizeArray"],"mappings":";;;;;;;;;AAMO,MAAM,gBAAgB,SAASA,0BAAgB,CAAC;AACvD,EAAE,WAAW,CAAC,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AAC5C,IAAI,KAAK,CAAC,EAAE,IAAI,EAAEC,iBAAa,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AACtD,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,KAAKC,iCAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC9E,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAGC,6BAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAGA,6BAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACrF,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,MAAM,GAAG;AACX,IAAI,OAAO;AACX,MAAM,GAAG,IAAI,CAAC,IAAI;AAClB,MAAM,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE,CAAC;AACxE,KAAK,CAAC;AACN,GAAG;AACH;;;;"}
\ No newline at end of file
diff --git a/dist/components/ActionRow.d.ts b/dist/components/ActionRow.d.ts
index 230ff022be48394c1f1b39e0ff5299024c839fa1..8ac6957c49f928ebfa081edf1bb392d022ed8a0d 100644
--- a/dist/components/ActionRow.d.ts
+++ b/dist/components/ActionRow.d.ts
@@ -7,7 +7,7 @@ import { type RestOrArray } from '../util/normalizeArray';
 export declare type MessageComponentBuilder = MessageActionRowComponentBuilder | ActionRowBuilder<MessageActionRowComponentBuilder>;
 export declare type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;
 export declare type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;
-export declare type ModalActionRowComponentBuilder = TextInputBuilder;
+export declare type ModalActionRowComponentBuilder = TextInputBuilder | SelectMenuBuilder;
 export declare type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;
 /**
  * Represents an action row component
diff --git a/dist/components/ActionRow.d.ts.map b/dist/components/ActionRow.d.ts.map
index 9434f1e584160c624b66bfbe68da1cbab0a25394..ee883d0735897db3c3864b17f59fbbd5d5140537 100644
--- a/dist/components/ActionRow.d.ts.map
+++ b/dist/components/ActionRow.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ActionRow.d.ts","sourceRoot":"","sources":["../../src/components/ActionRow.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,KAAK,qBAAqB,EAE1B,4BAA4B,EAC5B,0BAA0B,EAC1B,0BAA0B,EAC1B,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAE/C,OAAO,KAAK,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AACjE,OAAO,KAAK,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAkB,KAAK,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAE1E,oBAAY,uBAAuB,GAChC,gCAAgC,GAChC,gBAAgB,CAAC,gCAAgC,CAAC,CAAC;AACtD,oBAAY,qBAAqB,GAAG,8BAA8B,GAAG,gBAAgB,CAAC,8BAA8B,CAAC,CAAC;AACtH,oBAAY,gCAAgC,GAAG,aAAa,GAAG,iBAAiB,CAAC;AACjF,oBAAY,8BAA8B,GAAG,gBAAgB,CAAC;AAC9D,oBAAY,mBAAmB,GAAG,gCAAgC,GAAG,8BAA8B,CAAC;AAEpG;;;;GAIG;AACH,qBAAa,gBAAgB,CAAC,CAAC,SAAS,mBAAmB,CAAE,SAAQ,gBAAgB,CACpF,qBAAqB,CAAC,4BAA4B,GAAG,0BAA0B,CAAC,CAChF;IACA;;OAEG;IACH,SAAgB,UAAU,EAAE,CAAC,EAAE,CAAC;gBAEb,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAE,OAAO,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,CAAM;IAK3G;;;;OAIG;IACI,aAAa,CAAC,GAAG,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAKlD;;;;OAIG;IACI,aAAa,CAAC,GAAG,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAKlD;;OAEG;IACI,MAAM,IAAI,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;CAO/D"}
\ No newline at end of file
+{"version":3,"file":"ActionRow.d.ts","sourceRoot":"","sources":["../../src/components/ActionRow.ts"],"names":[],"mappings":"AAAA,OAAO,EACN,KAAK,qBAAqB,EAE1B,4BAA4B,EAC5B,0BAA0B,EAC1B,0BAA0B,EAC1B,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAE/C,OAAO,KAAK,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,KAAK,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;AACjE,OAAO,KAAK,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAkB,KAAK,WAAW,EAAE,MAAM,wBAAwB,CAAC;AAE1E,oBAAY,uBAAuB,GAChC,gCAAgC,GAChC,gBAAgB,CAAC,gCAAgC,CAAC,CAAC;AACtD,oBAAY,qBAAqB,GAAG,8BAA8B,GAAG,gBAAgB,CAAC,8BAA8B,CAAC,CAAC;AACtH,oBAAY,gCAAgC,GAAG,aAAa,GAAG,iBAAiB,CAAC;AACjF,oBAAY,8BAA8B,GAAG,gBAAgB,GAAG,iBAAiB,CAAC;AAClF,oBAAY,mBAAmB,GAAG,gCAAgC,GAAG,8BAA8B,CAAC;AAEpG;;;;GAIG;AACH,qBAAa,gBAAgB,CAAC,CAAC,SAAS,mBAAmB,CAAE,SAAQ,gBAAgB,CACpF,qBAAqB,CAAC,4BAA4B,GAAG,0BAA0B,CAAC,CAChF;IACA;;OAEG;IACH,SAAgB,UAAU,EAAE,CAAC,EAAE,CAAC;gBAEb,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAE,OAAO,CAAC,qBAAqB,CAAC,0BAA0B,CAAC,CAAM;IAK3G;;;;OAIG;IACI,aAAa,CAAC,GAAG,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAKlD;;;;OAIG;IACI,aAAa,CAAC,GAAG,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;IAKlD;;OAEG;IACI,MAAM,IAAI,qBAAqB,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;CAO/D"}
\ No newline at end of file
diff --git a/dist/components/ActionRow.mjs.map b/dist/components/ActionRow.mjs.map
index 7ad2760aebc7807b0cc7c7df5095045663cc3269..f46c49fb31b140580c095de741cbf5b7e6a49071 100644
--- a/dist/components/ActionRow.mjs.map
+++ b/dist/components/ActionRow.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"ActionRow.mjs","sources":["../../src/components/ActionRow.ts"],"sourcesContent":["import {\n\ttype APIActionRowComponent,\n\tComponentType,\n\tAPIMessageActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from './Component';\nimport { createComponentBuilder } from './Components';\nimport type { ButtonBuilder } from './button/Button';\nimport type { SelectMenuBuilder } from './selectMenu/SelectMenu';\nimport type { TextInputBuilder } from './textInput/TextInput';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray';\n\nexport type MessageComponentBuilder =\n\t| MessageActionRowComponentBuilder\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>;\nexport type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;\nexport type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAMO,MAAM,gBAAgB,SAAS,gBAAgB,CAAC;AACvD,EAAE,WAAW,CAAC,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AAC5C,IAAI,KAAK,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AACtD,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC9E,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACrF,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,MAAM,GAAG;AACX,IAAI,OAAO;AACX,MAAM,GAAG,IAAI,CAAC,IAAI;AAClB,MAAM,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE,CAAC;AACxE,KAAK,CAAC;AACN,GAAG;AACH;;;;"}
\ No newline at end of file
+{"version":3,"file":"ActionRow.mjs","sources":["../../src/components/ActionRow.ts"],"sourcesContent":["import {\n\ttype APIActionRowComponent,\n\tComponentType,\n\tAPIMessageActionRowComponent,\n\tAPIModalActionRowComponent,\n\tAPIActionRowComponentTypes,\n} from 'discord-api-types/v10';\nimport { ComponentBuilder } from './Component';\nimport { createComponentBuilder } from './Components';\nimport type { ButtonBuilder } from './button/Button';\nimport type { SelectMenuBuilder } from './selectMenu/SelectMenu';\nimport type { TextInputBuilder } from './textInput/TextInput';\nimport { normalizeArray, type RestOrArray } from '../util/normalizeArray';\n\nexport type MessageComponentBuilder =\n\t| MessageActionRowComponentBuilder\n\t| ActionRowBuilder<MessageActionRowComponentBuilder>;\nexport type ModalComponentBuilder = ModalActionRowComponentBuilder | ActionRowBuilder<ModalActionRowComponentBuilder>;\nexport type MessageActionRowComponentBuilder = ButtonBuilder | SelectMenuBuilder;\nexport type ModalActionRowComponentBuilder = TextInputBuilder | SelectMenuBuilder;\nexport type AnyComponentBuilder = MessageActionRowComponentBuilder | ModalActionRowComponentBuilder;\n\n/**\n * Represents an action row component\n *\n * @typeParam T - The types of components this action row holds\n */\nexport class ActionRowBuilder<T extends AnyComponentBuilder> extends ComponentBuilder<\n\tAPIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>\n> {\n\t/**\n\t * The components within this action row\n\t */\n\tpublic readonly components: T[];\n\n\tpublic constructor({ components, ...data }: Partial<APIActionRowComponent<APIActionRowComponentTypes>> = {}) {\n\t\tsuper({ type: ComponentType.ActionRow, ...data });\n\t\tthis.components = (components?.map((c) => createComponentBuilder(c)) ?? []) as T[];\n\t}\n\n\t/**\n\t * Adds components to this action row.\n\t *\n\t * @param components - The components to add to this action row.\n\t */\n\tpublic addComponents(...components: RestOrArray<T>) {\n\t\tthis.components.push(...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the components in this action row\n\t *\n\t * @param components - The components to set this row to\n\t */\n\tpublic setComponents(...components: RestOrArray<T>) {\n\t\tthis.components.splice(0, this.components.length, ...normalizeArray(components));\n\t\treturn this;\n\t}\n\n\t/**\n\t * {@inheritDoc ComponentBuilder.toJSON}\n\t */\n\tpublic toJSON(): APIActionRowComponent<ReturnType<T['toJSON']>> {\n\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\treturn {\n\t\t\t...this.data,\n\t\t\tcomponents: this.components.map((component) => component.toJSON()),\n\t\t} as APIActionRowComponent<ReturnType<T['toJSON']>>;\n\t}\n}\n"],"names":[],"mappings":";;;;;AAMO,MAAM,gBAAgB,SAAS,gBAAgB,CAAC;AACvD,EAAE,WAAW,CAAC,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE;AAC5C,IAAI,KAAK,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;AACtD,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,KAAK,sBAAsB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AAC9E,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,aAAa,CAAC,GAAG,UAAU,EAAE;AAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;AACrF,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,MAAM,GAAG;AACX,IAAI,OAAO;AACX,MAAM,GAAG,IAAI,CAAC,IAAI;AAClB,MAAM,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,KAAK,SAAS,CAAC,MAAM,EAAE,CAAC;AACxE,KAAK,CAAC;AACN,GAAG;AACH;;;;"}
\ No newline at end of file
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs
index ae13bfbd544d42fbdca78dbc88df22670be3142d..36a19a9555bca5a1ecbbcbf58e6f81563c0dfbb8 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs
@@ -9,10 +9,10 @@ const allowedChannelTypes = [
   v10.ChannelType.GuildText,
   v10.ChannelType.GuildVoice,
   v10.ChannelType.GuildCategory,
-  v10.ChannelType.GuildNews,
-  v10.ChannelType.GuildNewsThread,
-  v10.ChannelType.GuildPublicThread,
-  v10.ChannelType.GuildPrivateThread,
+  v10.ChannelType.GuildAnnouncement,
+  v10.ChannelType.AnnouncementThread,
+  v10.ChannelType.PublicThread,
+  v10.ChannelType.PrivateThread,
   v10.ChannelType.GuildStageVoice
 ];
 const channelTypesPredicate = shapeshift.s.array(shapeshift.s.union(...allowedChannelTypes.map((type) => shapeshift.s.literal(type))));
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs.map b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs.map
index 8a9283218252b8211aa9e1c53aeb9c9f86f7aba8..c3e177c59a9bf8f920e605af554551f75b8219df 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs.map
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.cjs","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildNews,\n\tChannelType.GuildNewsThread,\n\tChannelType.GuildPublicThread,\n\tChannelType.GuildPrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n"],"names":["ChannelType","s"],"mappings":";;;;;;;AAEA,MAAM,mBAAmB,GAAG;AAC5B,EAAEA,eAAW,CAAC,SAAS;AACvB,EAAEA,eAAW,CAAC,UAAU;AACxB,EAAEA,eAAW,CAAC,aAAa;AAC3B,EAAEA,eAAW,CAAC,SAAS;AACvB,EAAEA,eAAW,CAAC,eAAe;AAC7B,EAAEA,eAAW,CAAC,iBAAiB;AAC/B,EAAEA,eAAW,CAAC,kBAAkB;AAChC,EAAEA,eAAW,CAAC,eAAe;AAC7B,CAAC,CAAC;AACF,MAAM,qBAAqB,GAAGC,YAAC,CAAC,KAAK,CAACA,YAAC,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAKA,YAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,MAAM,yCAAyC,CAAC;AACvD,EAAE,eAAe,CAAC,GAAG,YAAY,EAAE;AACnC,IAAI,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,EAAE;AACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;;;;"}
\ No newline at end of file
+{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.cjs","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildAnnouncement,\n\tChannelType.AnnouncementThread,\n\tChannelType.PublicThread,\n\tChannelType.PrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n"],"names":["ChannelType","s"],"mappings":";;;;;;;AAEA,MAAM,mBAAmB,GAAG;AAC5B,EAAEA,eAAW,CAAC,SAAS;AACvB,EAAEA,eAAW,CAAC,UAAU;AACxB,EAAEA,eAAW,CAAC,aAAa;AAC3B,EAAEA,eAAW,CAAC,iBAAiB;AAC/B,EAAEA,eAAW,CAAC,kBAAkB;AAChC,EAAEA,eAAW,CAAC,YAAY;AAC1B,EAAEA,eAAW,CAAC,aAAa;AAC3B,EAAEA,eAAW,CAAC,eAAe;AAC7B,CAAC,CAAC;AACF,MAAM,qBAAqB,GAAGC,YAAC,CAAC,KAAK,CAACA,YAAC,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAKA,YAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,MAAM,yCAAyC,CAAC;AACvD,EAAE,eAAe,CAAC,GAAG,YAAY,EAAE;AACnC,IAAI,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,EAAE;AACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;;;;"}
\ No newline at end of file
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts
index deb4fe1e846d1af9b5d419efbc08df57872e27c4..ed1944f7538baaf9f362b5666080ee52905b0843 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts
@@ -1,5 +1,5 @@
 import { ChannelType } from 'discord-api-types/v10';
-declare const allowedChannelTypes: readonly [ChannelType.GuildText, ChannelType.GuildVoice, ChannelType.GuildCategory, ChannelType.GuildNews, ChannelType.GuildNewsThread, ChannelType.GuildPublicThread, ChannelType.GuildPrivateThread, ChannelType.GuildStageVoice];
+declare const allowedChannelTypes: readonly [ChannelType.GuildText, ChannelType.GuildVoice, ChannelType.GuildCategory, ChannelType.GuildAnnouncement, ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread, ChannelType.GuildStageVoice];
 export declare type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];
 export declare class ApplicationCommandOptionChannelTypesMixin {
     readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts.map b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts.map
index 7f0cd50dfd56e99f64146caf4fa4a9eaf45925c3..255137615b8e4119e78b4786e41a56c5ae230cb2 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts.map
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.d.ts","sourceRoot":"","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,QAAA,MAAM,mBAAmB,qOASf,CAAC;AAEX,oBAAY,2CAA2C,GAAG,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAI7F,qBAAa,yCAAyC;IACrD,SAAgB,aAAa,CAAC,EAAE,2CAA2C,EAAE,CAAC;IAE9E;;;;OAIG;IACI,eAAe,CAAC,GAAG,YAAY,EAAE,2CAA2C,EAAE;CASrF"}
\ No newline at end of file
+{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.d.ts","sourceRoot":"","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAGpD,QAAA,MAAM,mBAAmB,sOASf,CAAC;AAEX,oBAAY,2CAA2C,GAAG,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;AAI7F,qBAAa,yCAAyC;IACrD,SAAgB,aAAa,CAAC,EAAE,2CAA2C,EAAE,CAAC;IAE9E;;;;OAIG;IACI,eAAe,CAAC,GAAG,YAAY,EAAE,2CAA2C,EAAE;CASrF"}
\ No newline at end of file
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs
index e2be25e02b29b1fa5e1484779231cd7d8aea1fa0..a4d4944117d170377eae3c64fecc0c2fdbb5cd45 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs
@@ -5,10 +5,10 @@ const allowedChannelTypes = [
   ChannelType.GuildText,
   ChannelType.GuildVoice,
   ChannelType.GuildCategory,
-  ChannelType.GuildNews,
-  ChannelType.GuildNewsThread,
-  ChannelType.GuildPublicThread,
-  ChannelType.GuildPrivateThread,
+  ChannelType.GuildAnnouncement,
+  ChannelType.AnnouncementThread,
+  ChannelType.PublicThread,
+  ChannelType.PrivateThread,
   ChannelType.GuildStageVoice
 ];
 const channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));
diff --git a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs.map b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs.map
index e97a2932073139a6c730bd407abd13ba2722f8a7..751ea7eafbfe87f1da66d18392931972a3f8107e 100644
--- a/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs.map
+++ b/dist/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.mjs","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildNews,\n\tChannelType.GuildNewsThread,\n\tChannelType.GuildPublicThread,\n\tChannelType.GuildPrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n"],"names":[],"mappings":";;;AAEA,MAAM,mBAAmB,GAAG;AAC5B,EAAE,WAAW,CAAC,SAAS;AACvB,EAAE,WAAW,CAAC,UAAU;AACxB,EAAE,WAAW,CAAC,aAAa;AAC3B,EAAE,WAAW,CAAC,SAAS;AACvB,EAAE,WAAW,CAAC,eAAe;AAC7B,EAAE,WAAW,CAAC,iBAAiB;AAC/B,EAAE,WAAW,CAAC,kBAAkB;AAChC,EAAE,WAAW,CAAC,eAAe;AAC7B,CAAC,CAAC;AACF,MAAM,qBAAqB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,MAAM,yCAAyC,CAAC;AACvD,EAAE,eAAe,CAAC,GAAG,YAAY,EAAE;AACnC,IAAI,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,EAAE;AACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;;;;"}
\ No newline at end of file
+{"version":3,"file":"ApplicationCommandOptionChannelTypesMixin.mjs","sources":["../../../../src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts"],"sourcesContent":["import { s } from '@sapphire/shapeshift';\nimport { ChannelType } from 'discord-api-types/v10';\n\n// Only allow valid channel types to be used. (This can't be dynamic because const enums are erased at runtime)\nconst allowedChannelTypes = [\n\tChannelType.GuildText,\n\tChannelType.GuildVoice,\n\tChannelType.GuildCategory,\n\tChannelType.GuildAnnouncement,\n\tChannelType.AnnouncementThread,\n\tChannelType.PublicThread,\n\tChannelType.PrivateThread,\n\tChannelType.GuildStageVoice,\n] as const;\n\nexport type ApplicationCommandOptionAllowedChannelTypes = typeof allowedChannelTypes[number];\n\nconst channelTypesPredicate = s.array(s.union(...allowedChannelTypes.map((type) => s.literal(type))));\n\nexport class ApplicationCommandOptionChannelTypesMixin {\n\tpublic readonly channel_types?: ApplicationCommandOptionAllowedChannelTypes[];\n\n\t/**\n\t * Adds channel types to this option\n\t *\n\t * @param channelTypes - The channel types to add\n\t */\n\tpublic addChannelTypes(...channelTypes: ApplicationCommandOptionAllowedChannelTypes[]) {\n\t\tif (this.channel_types === undefined) {\n\t\t\tReflect.set(this, 'channel_types', []);\n\t\t}\n\n\t\tthis.channel_types!.push(...channelTypesPredicate.parse(channelTypes));\n\n\t\treturn this;\n\t}\n}\n"],"names":[],"mappings":";;;AAEA,MAAM,mBAAmB,GAAG;AAC5B,EAAE,WAAW,CAAC,SAAS;AACvB,EAAE,WAAW,CAAC,UAAU;AACxB,EAAE,WAAW,CAAC,aAAa;AAC3B,EAAE,WAAW,CAAC,iBAAiB;AAC/B,EAAE,WAAW,CAAC,kBAAkB;AAChC,EAAE,WAAW,CAAC,YAAY;AAC1B,EAAE,WAAW,CAAC,aAAa;AAC3B,EAAE,WAAW,CAAC,eAAe;AAC7B,CAAC,CAAC;AACF,MAAM,qBAAqB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/F,MAAM,yCAAyC,CAAC;AACvD,EAAE,eAAe,CAAC,GAAG,YAAY,EAAE;AACnC,IAAI,IAAI,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,EAAE;AACvC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;AAC1E,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;;;;"}
\ No newline at end of file
