diff --git a/dist/defaultWorker.js b/dist/defaultWorker.js
index 5e24cdf44d7a3d09f29d89006701dda9d14a3248..c9b5212b7b03a5d9f020940afcd22491cd7bc654 100644
--- a/dist/defaultWorker.js
+++ b/dist/defaultWorker.js
@@ -523,7 +523,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/defaultWorker.mjs b/dist/defaultWorker.mjs
index c81568565a8316726b1121fc57ae43ce20b34ac5..f8c540368a73a468cbfbeebb56472cb0db327234 100644
--- a/dist/defaultWorker.mjs
+++ b/dist/defaultWorker.mjs
@@ -505,7 +505,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/index.js b/dist/index.js
index 20c542d83f910b646f29c5b00c7b9c9057560e91..09451c61f58e735e774f4345ac14899acefc8147 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -751,7 +751,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
diff --git a/dist/index.mjs b/dist/index.mjs
index 0cb0e964461a902954ae8d3f9f7595d6cd0bc14d..07e557f83458781ca2c03f65bbd746a8a71cd4f7 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -714,7 +714,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const timeoutController = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => timeoutController.abort(), timeoutDuration) : null;
     this.timeoutAbortControllers.set(event, timeoutController);
     const closeController = new AbortController();
     try {
