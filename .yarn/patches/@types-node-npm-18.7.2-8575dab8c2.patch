diff --git a/globals.d.ts b/globals.d.ts
index da499940ebbaa462edb8ce6c2dd2f1b67a19b925..239edbc61c6393fbdcbcc38ff2d8830a91f99abe 100755
--- a/globals.d.ts
+++ b/globals.d.ts
@@ -48,12 +48,11 @@ interface AbortController {
     /**
      * Returns the AbortSignal object associated with this object.
      */
-
     readonly signal: AbortSignal;
     /**
      * Invoking this method will set this object's AbortSignal's aborted flag and signal to any observers that the associated activity is to be aborted.
      */
-    abort(): void;
+    abort(reason?: unknown): void;
 }
 
 /** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */
@@ -69,10 +68,38 @@ declare var AbortController: {
     new(): AbortController;
 };
 
+interface AbortSignalEventMap {
+    "abort": NodeJS.Event;
+}
+
+/** A signal object that allows you to communicate with a DOM request (such as a Fetch) and abort it if required via an AbortController object. */
+interface AbortSignal extends EventTarget {
+    /**
+     * Returns true if this AbortSignal's AbortController has signaled to abort, and false otherwise.
+     */
+    readonly aborted: boolean;
+    onabort: ((this: AbortSignal, ev: NodeJS.Event) => any) | null;
+    /**
+     * An optional reason specified when the AbortSignal was triggered.
+     * @since v17.2.0
+     */
+    readonly reason: unknown;
+    /**
+     * If {@link aborted} is true, throws {@link reason}.
+     * @since v17.3.0
+     */
+    throwIfAborted(): void;
+    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | NodeJS.AddEventListenerOptions): void;
+    addEventListener(type: string, listener: NodeJS.EventListenerOrEventListenerObject, options?: boolean | NodeJS.AddEventListenerOptions): void;
+    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | NodeJS.EventListenerOptions): void;
+    removeEventListener(type: string, listener: NodeJS.EventListenerOrEventListenerObject, options?: boolean | NodeJS.EventListenerOptions): void;
+}
+
 declare var AbortSignal: {
     prototype: AbortSignal;
     new(): AbortSignal;
-    // TODO: Add abort() static
+    abort(reason?: unknown): AbortSignal;
+	timeout(delay: number): AbortSignal;
 };
 //#endregion borrowed
 
