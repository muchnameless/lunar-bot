diff --git a/src/client/websocket/WebSocketManager.js b/src/client/websocket/WebSocketManager.js
index 6b938f16e7409b72928e02efe6ae93d19b49fb3e..5354bed91e05f0f0ebc882e03ba736a70bcfe9f6 100644
--- a/src/client/websocket/WebSocketManager.js
+++ b/src/client/websocket/WebSocketManager.js
@@ -22,13 +22,14 @@ const BeforeReadyWhitelist = [
   GatewayDispatchEvents.GuildMemberRemove,
 ];
 
-const UNRECOVERABLE_CLOSE_CODES = [
-  GatewayCloseCodes.AuthenticationFailed,
-  GatewayCloseCodes.InvalidShard,
-  GatewayCloseCodes.ShardingRequired,
-  GatewayCloseCodes.InvalidIntents,
-  GatewayCloseCodes.DisallowedIntents,
-];
+const unrecoverableErrorCodeMap = {
+  [GatewayCloseCodes.AuthenticationFailed]: ErrorCodes.TokenInvalid,
+  [GatewayCloseCodes.InvalidShard]: ErrorCodes.ShardingInvalid,
+  [GatewayCloseCodes.ShardingRequired]: ErrorCodes.ShardingRequired,
+  [GatewayCloseCodes.InvalidIntents]: ErrorCodes.InvalidIntents,
+  [GatewayCloseCodes.DisallowedIntents]: ErrorCodes.DisallowedIntents,
+};
+
 const UNRESUMABLE_CLOSE_CODES = [1000, GatewayCloseCodes.AlreadyAuthenticated, GatewayCloseCodes.InvalidSeq];
 
 /**
@@ -194,7 +195,7 @@ class WebSocketManager extends EventEmitter {
       });
 
       shard.on(ShardEvents.Close, event => {
-        if (event.code === 1_000 ? this.destroyed : UNRECOVERABLE_CLOSE_CODES.includes(event.code)) {
+        if (event.code === 1_000 ? this.destroyed : event.code in unrecoverableErrorCodeMap) {
           /**
            * Emitted when a shard's WebSocket disconnects and will no longer reconnect.
            * @event Client#shardDisconnect
@@ -245,8 +246,8 @@ class WebSocketManager extends EventEmitter {
     try {
       await shard.connect();
     } catch (error) {
-      if (error?.code && UNRECOVERABLE_CLOSE_CODES.includes(error.code)) {
-        throw new Error(GatewayCloseCodes[error.code]);
+      if (error?.code && error.code in unrecoverableErrorCodeMap) {
+        throw new Error(unrecoverableErrorCodeMap[error.code]);
         // Undefined if session is invalid, error event for regular closes
       } else if (!error || error.code) {
         this.debug('Failed to connect to the gateway, requeueing...', shard);
diff --git a/src/client/websocket/WebSocketShard.js b/src/client/websocket/WebSocketShard.js
index 7e822caf6da297a7b084c44f064307f3fa928c80..9e0b96bab7fdff21f50e0678ff4b36d7f9239161 100644
--- a/src/client/websocket/WebSocketShard.js
+++ b/src/client/websocket/WebSocketShard.js
@@ -269,6 +269,7 @@ class WebSocketShard extends EventEmitter {
       this.status = this.status === Status.Disconnected ? Status.Reconnecting : Status.Connecting;
       this.setHelloTimeout();
 
+      this.setWsCloseTimeout(-1);
       this.connectedAt = Date.now();
 
       // Adding a handshake timeout to just make sure no zombie connection appears.
@@ -859,7 +860,8 @@ class WebSocketShard extends EventEmitter {
    * @private
    */
   _cleanupConnection() {
-    this.connection.onopen = this.connection.onclose = this.connection.onerror = this.connection.onmessage = null;
+    this.connection.onopen = this.connection.onclose = this.connection.onmessage = null;
+    this.connection.onerror = () => null;
   }
 
   /**
diff --git a/src/errors/DJSError.js b/src/errors/DJSError.js
index 877e3a8920e24ad19639268d024c61ae1a1f5c18..aa37ab3a9352ffc7b526a996305208272b1a4283 100644
--- a/src/errors/DJSError.js
+++ b/src/errors/DJSError.js
@@ -16,7 +16,7 @@ function makeDiscordjsError(Base) {
     constructor(code, ...args) {
       super(message(code, args));
       this[kCode] = code;
-      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);
+      Error.captureStackTrace?.(this, DiscordjsError);
     }
 
     get name() {
diff --git a/src/errors/Messages.js b/src/errors/Messages.js
index 08e801123df6835151fdaa39b7c0dcade774de91..417e7a809637bc4fad0540b326312dec28e01a40 100644
--- a/src/errors/Messages.js
+++ b/src/errors/Messages.js
@@ -159,11 +159,4 @@ const Messages = {
   [DjsErrorCodes.SweepFilterReturn]: 'The return value of the sweepFilter function was not false or a Function',
 };
 
-// Magic needed by WS
-Messages.AuthenticationFailed = Messages[DjsErrorCodes.TokenInvalid];
-Messages.InvalidShard = Messages[DjsErrorCodes.ShardingInvalid];
-Messages.ShardingRequired = Messages[DjsErrorCodes.ShardingRequired];
-Messages.InvalidIntents = Messages[DjsErrorCodes.InvalidIntents];
-Messages.DisallowedIntents = Messages[DjsErrorCodes.DisallowedIntents];
-
 module.exports = Messages;
diff --git a/src/structures/ActionRowBuilder.js b/src/structures/ActionRowBuilder.js
index 379b0e1f43273c4f979203e4087af3a4f654df19..fabdac796e2005ab2e03704c3cf18fbb077c2e54 100644
--- a/src/structures/ActionRowBuilder.js
+++ b/src/structures/ActionRowBuilder.js
@@ -1,21 +1,12 @@
 'use strict';
 
 const { ActionRowBuilder: BuildersActionRow, ComponentBuilder, isJSONEncodable } = require('@discordjs/builders');
-const { createComponentBuilder } = require('../util/Components');
-const { toSnakeCase } = require('../util/Transformers');
 
 /**
  * Represents an action row builder.
  * @extends {BuildersActionRow}
  */
 class ActionRowBuilder extends BuildersActionRow {
-  constructor({ components, ...data } = {}) {
-    super({
-      ...toSnakeCase(data),
-      components: components?.map(c => (c instanceof ComponentBuilder ? c : createComponentBuilder(c))),
-    });
-  }
-
   /**
    * Creates a new action row builder from JSON data
    * @param {JSONEncodable<APIActionRowComponent<APIActionRowComponentTypes>>
diff --git a/src/structures/AttachmentBuilder.js b/src/structures/AttachmentBuilder.js
index f904cb84b34ef249eba111282e28b6307695ce4d..528843909e65ff4293b1a9efc71ec757402d7a38 100644
--- a/src/structures/AttachmentBuilder.js
+++ b/src/structures/AttachmentBuilder.js
@@ -1,31 +1,25 @@
 'use strict';
 
-const { basename, flatten } = require('../util/Util');
+const { basename } = require('../util/Util');
 
 /**
  * Represents an attachment builder
  */
 class AttachmentBuilder {
   /**
-   * @param {BufferResolvable|Stream} attachment The file
-   * @param {APIAttachment} [data] Extra data
+   * @param {AttachmentPayload} payload Attachment and extra data
    */
-  constructor(attachment, data = {}) {
+  constructor({ attachment, ...data } = {}) {
     /**
      * The file associated with this attachment.
      * @type {BufferResolvable|Stream}
      */
     this.attachment = attachment;
     /**
-     * The name of this attachment
-     * @type {?string}
-     */
-    this.name = data.name;
-    /**
-     * The description of the attachment
-     * @type {?string}
+     * The API data associated with this attachment.
+     * @type {APIAttachment}
      */
-    this.description = data.description;
+    this.data = data;
   }
 
   /**
@@ -34,7 +28,7 @@ class AttachmentBuilder {
    * @returns {AttachmentBuilder} This attachment
    */
   setDescription(description) {
-    this.description = description;
+    this.data.description = description;
     return this;
   }
 
@@ -54,7 +48,7 @@ class AttachmentBuilder {
    * @returns {AttachmentBuilder} This attachment
    */
   setName(name) {
-    this.name = name;
+    this.data.name = name;
     return this;
   }
 
@@ -68,7 +62,7 @@ class AttachmentBuilder {
 
     if (!spoiler) {
       while (this.spoiler) {
-        this.name = this.name.slice('SPOILER_'.length);
+        this.data.name = this.data.name.slice('SPOILER_'.length);
       }
       return this;
     }
@@ -82,11 +76,11 @@ class AttachmentBuilder {
    * @readonly
    */
   get spoiler() {
-    return basename(this.name).startsWith('SPOILER_');
+    return basename(this.data.name ?? '').startsWith('SPOILER_');
   }
 
   toJSON() {
-    return flatten(this);
+    return { ...this.data, attachment: this.attachment };
   }
 
   /**
@@ -95,10 +89,10 @@ class AttachmentBuilder {
    * @returns {AttachmentBuilder}
    */
   static from(other) {
-    return new AttachmentBuilder(other.attachment, {
-      name: other.name,
-      description: other.description,
-    });
+    if (isJSONEncodable(other)) {
+      return new this(other.toJSON());
+    }
+    return new this(other);
   }
 }
 
diff --git a/src/structures/ButtonBuilder.js b/src/structures/ButtonBuilder.js
index 671a77a8f574c3892055bc6d073fa5439c14cbc9..fe7c86df56acdf30b510bd7ec2f3e4bfe96d9777 100644
--- a/src/structures/ButtonBuilder.js
+++ b/src/structures/ButtonBuilder.js
@@ -1,30 +1,12 @@
 'use strict';
 
 const { ButtonBuilder: BuildersButton, isJSONEncodable } = require('@discordjs/builders');
-const { toSnakeCase } = require('../util/Transformers');
-const { parseEmoji } = require('../util/Util');
 
 /**
  * Represents a button builder.
  * @extends {BuildersButton}
  */
 class ButtonBuilder extends BuildersButton {
-  constructor({ emoji, ...data } = {}) {
-    super(toSnakeCase({ ...data, emoji: emoji && typeof emoji === 'string' ? parseEmoji(emoji) : emoji }));
-  }
-
-  /**
-   * Sets the emoji to display on this button
-   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button
-   * @returns {ButtonBuilder}
-   */
-  setEmoji(emoji) {
-    if (typeof emoji === 'string') {
-      return super.setEmoji(parseEmoji(emoji));
-    }
-    return super.setEmoji(emoji);
-  }
-
   /**
    * Creates a new button builder from JSON data
    * @param {JSONEncodable<APIButtonComponent>|APIButtonComponent} other The other data
diff --git a/src/structures/GuildEmoji.js b/src/structures/GuildEmoji.js
index baf328ccb44b53c8725e5ea7204f6cb8c4b29945..a85daccc3cd649fd0c42313b1f1108cc52259eb4 100644
--- a/src/structures/GuildEmoji.js
+++ b/src/structures/GuildEmoji.js
@@ -55,8 +55,9 @@ class GuildEmoji extends BaseGuildEmoji {
    * @readonly
    */
   get deletable() {
-    if (!this.guild.members.me) throw new Error(ErrorCodes.GuildUncachedMe);
-    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
+    const { me } = this.guild.members;
+    if (!me) throw new Error(ErrorCodes.GuildUncachedMe);
+    return !this.managed && me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
   }
 
   /**
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index b0ee8458c90ee81551e90a0e29d15c25802fa5f8..6293abd97123cdf7c09d668319d150bcf5879a8f 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -239,8 +239,9 @@ class GuildMember extends Base {
     if (this.user.id === this.guild.ownerId) return false;
     if (this.user.id === this.client.user.id) return false;
     if (this.client.user.id === this.guild.ownerId) return true;
-    if (!this.guild.members.me) throw new Error(ErrorCodes.GuildUncachedMe);
-    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
+    const { me } = this.guild.members;
+    if (!me) throw new Error(ErrorCodes.GuildUncachedMe);
+    return me.roles.highest.comparePositionTo(this.roles.highest) > 0;
   }
 
   /**
@@ -249,7 +250,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get kickable() {
-    if (!this.guild.members.me) throw new Error(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);
   }
 
@@ -259,7 +259,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get bannable() {
-    if (!this.guild.members.me) throw new Error(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);
   }
 
@@ -272,7 +271,7 @@ class GuildMember extends Base {
     return (
       !this.permissions.has(PermissionFlagsBits.Administrator) &&
       this.manageable &&
-      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
+      this.guild.members.me.permissions.has(PermissionFlagsBits.ModerateMembers)
     );
   }
 
diff --git a/src/structures/GuildScheduledEvent.js b/src/structures/GuildScheduledEvent.js
index 390486c877070f5a5858dec44f863427bc3c6f47..d7e328669e0e3fd4d78dd42539d34dda9fd83d2b 100644
--- a/src/structures/GuildScheduledEvent.js
+++ b/src/structures/GuildScheduledEvent.js
@@ -193,11 +193,12 @@ class GuildScheduledEvent extends Base {
 
   /**
    * The time the guild scheduled event will start at
-   * @type {Date}
+   * <info>This can be potentially `null` only when it's an {@link AuditLogEntryTarget}</info>
+   * @type {?Date}
    * @readonly
    */
   get scheduledStartAt() {
-    return new Date(this.scheduledStartTimestamp);
+    return this.scheduledStartTimestamp && new Date(this.scheduledStartTimestamp);
   }
 
   /**
diff --git a/src/structures/Invite.js b/src/structures/Invite.js
index d0e9602c7279d7035284241f5fda87beec8ac078..61a01eb05a7bc9d7a99c6b9eee0492fb0dc726f7 100644
--- a/src/structures/Invite.js
+++ b/src/structures/Invite.js
@@ -233,10 +233,11 @@ class Invite extends Base {
   get deletable() {
     const guild = this.guild;
     if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
-    if (!guild.members.me) throw new Error(ErrorCodes.GuildUncachedMe);
+    const { me } = guild.members;
+    if (!me) throw new Error(ErrorCodes.GuildUncachedMe);
     return Boolean(
       this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
-        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),
+      me.permissions.has(PermissionFlagsBits.ManageGuild),
     );
   }
 
diff --git a/src/structures/Message.js b/src/structures/Message.js
index fe2347bc8f4b4195ac039556e4d2b80ce469f208..1ed24f988aa769b13846b4a6d3ad59573a965ed4 100644
--- a/src/structures/Message.js
+++ b/src/structures/Message.js
@@ -275,10 +275,13 @@ class Message extends Base {
       this.client.channels._add(data.thread, this.guild);
     }
 
-    if (this.member && data.member) {
-      this.member._patch(data.member);
-    } else if (data.member && this.guild && this.author) {
-      this.guild.members._add(Object.assign(data.member, { user: this.author }));
+    if (data.member) {
+      const { member } = this;
+      if (member) {
+        member._patch(data.member);
+      } else if (this.author) {
+        this.guild?.members._add(Object.assign(data.member, { user: this.author }));
+      }
     }
 
     if ('flags' in data) {
@@ -552,11 +555,16 @@ class Message extends Base {
    * @readonly
    */
   get editable() {
-    const precheck = Boolean(this.author.id === this.client.user.id && (!this.guild || this.channel?.viewable));
+    const { channel } = this;
+    const precheck = Boolean(
+      this.author.id === this.client.user.id &&
+      !this.flags.has(MessageFlags.Ephemeral) &&
+      (!this.guildId || channel?.viewable)
+    );
     // Regardless of permissions thread messages cannot be edited if
     // the thread is locked.
-    if (this.channel?.isThread()) {
-      return precheck && !this.channel.locked;
+    if (channel?.isThread()) {
+      return precheck && !channel.locked;
     }
     return precheck;
   }
@@ -567,23 +575,27 @@ class Message extends Base {
    * @readonly
    */
   get deletable() {
-    if (!this.guild) {
+    if (this.flags.has(MessageFlags.Ephemeral)) {
+      return false;
+    }
+    if (!this.guildId) {
       return this.author.id === this.client.user.id;
     }
     // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.
-    if (!this.channel?.viewable) {
+    const { channel } = this;
+    if (!channel?.viewable) {
       return false;
     }
 
-    const permissions = this.channel?.permissionsFor(this.client.user);
+    const permissions = channel?.permissionsFor(this.client.user);
     if (!permissions) return false;
     // This flag allows deleting even if timed out
     if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;
 
     return Boolean(
       this.author.id === this.client.user.id ||
-        (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
-          this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()),
+      (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
+        this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()),
     );
   }
 
@@ -596,9 +608,10 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       !this.system &&
-        (!this.guild ||
-          (channel?.viewable &&
-            channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
+      !this.flags.has(MessageFlags.Ephemeral) &&
+      (!this.guildId ||
+        (channel?.viewable &&
+          channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
     );
   }
 
@@ -627,10 +640,10 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       channel?.type === ChannelType.GuildNews &&
-        !this.flags.has(MessageFlags.Crossposted) &&
-        this.type === MessageType.Default &&
-        channel.viewable &&
-        channel.permissionsFor(this.client.user)?.has(bitfield, false),
+      !this.flags.any(MessageFlags.Crossposted | MessageFlags.Ephemeral) &&
+      this.type === MessageType.Default &&
+      channel.viewable &&
+      channel.permissionsFor(this.client.user)?.has(bitfield, false),
     );
   }
 
@@ -661,8 +674,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   edit(options) {
-    if (!this.channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.edit(this, options);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
+    return channel.messages.edit(this, options);
   }
 
   /**
@@ -677,8 +691,9 @@ class Message extends Base {
    * }
    */
   crosspost() {
-    if (!this.channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.crosspost(this.id);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
+    return channel.messages.crosspost(this.id);
   }
 
   /**
@@ -692,8 +707,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async pin(reason) {
-    if (!this.channel) throw new Error(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.pin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new Error(ErrorCodes.ChannelNotCached);
+    await channel.messages.pin(this.id, reason);
     return this;
   }
 
@@ -708,8 +724,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async unpin(reason) {
-    if (!this.channel) throw new Error(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.unpin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new Error(ErrorCodes.ChannelNotCached);
+    await channel.messages.unpin(this.id, reason);
     return this;
   }
 
@@ -729,13 +746,14 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async react(emoji) {
-    if (!this.channel) throw new Error(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.react(this.id, emoji);
+    const { channel } = this;
+    if (!channel) throw new Error(ErrorCodes.ChannelNotCached);
+    await channel.messages.react(this.id, emoji);
 
     return this.client.actions.MessageReactionAdd.handle(
       {
         user: this.client.user,
-        channel: this.channel,
+        channel,
         message: this,
         emoji: resolvePartialEmoji(emoji),
       },
@@ -753,8 +771,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async delete() {
-    if (!this.channel) throw new Error(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.delete(this.id);
+    const { channel } = this;
+    if (!channel) throw new Error(ErrorCodes.ChannelNotCached);
+    await channel.messages.delete(this.id);
     return this;
   }
 
@@ -777,7 +796,8 @@ class Message extends Base {
    *   .catch(console.error);
    */
   reply(options) {
-    if (!this.channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
     let data;
 
     if (options instanceof MessagePayload) {
@@ -790,7 +810,7 @@ class Message extends Base {
         },
       });
     }
-    return this.channel.send(data);
+    return channel.send(data);
   }
 
   /**
@@ -810,12 +830,13 @@ class Message extends Base {
    * @returns {Promise<ThreadChannel>}
    */
   startThread(options = {}) {
-    if (!this.channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
-    if (![ChannelType.GuildText, ChannelType.GuildNews].includes(this.channel.type)) {
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
+    if (![ChannelType.GuildText, ChannelType.GuildNews].includes(channel.type)) {
       return Promise.reject(new Error(ErrorCodes.MessageThreadParent));
     }
     if (this.hasThread) return Promise.reject(new Error(ErrorCodes.MessageExistingThread));
-    return this.channel.threads.create({ ...options, startMessage: this });
+    return channel.threads.create({ ...options, startMessage: this });
   }
 
   /**
@@ -824,8 +845,9 @@ class Message extends Base {
    * @returns {Promise<Message>}
    */
   fetch(force = true) {
-    if (!this.channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.fetch({ message: this.id, force });
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error(ErrorCodes.ChannelNotCached));
+    return channel.messages.fetch({ message: this.id, force });
   }
 
   /**
diff --git a/src/structures/MessagePayload.js b/src/structures/MessagePayload.js
index 37edf4818440d2fd2c46d68d1cd557784cd414af..d3e9542a75b0d256eb9f678f201d5ceaf447117a 100644
--- a/src/structures/MessagePayload.js
+++ b/src/structures/MessagePayload.js
@@ -105,7 +105,7 @@ class MessagePayload {
     if (this.options.content === null) {
       content = '';
     } else if (typeof this.options.content !== 'undefined') {
-      content = verifyString(this.options.content, RangeError, ErrorCodes.MessageContentType, true);
+      content = verifyString(this.options.content, RangeError, ErrorCodes.MessageContentType);
     }
 
     return content;
@@ -132,7 +132,7 @@ class MessagePayload {
       }
     }
 
-    const components = this.options.components?.map(c => (isJSONEncodable(c) ? c : new ActionRowBuilder(c)).toJSON());
+    const components = this.options.components?.map(c => isJSONEncodable(c) ? c.toJSON() : this.target.client.options.jsonTransformer(c));
 
     let username;
     let avatarURL;
diff --git a/src/structures/ModalSubmitFields.js b/src/structures/ModalSubmitFields.js
index 6c289d4d0cc603dbdb5b11a4829d1afd7f04334c..1eed94cab55534557b29c297dc1195cbb4db6129 100644
--- a/src/structures/ModalSubmitFields.js
+++ b/src/structures/ModalSubmitFields.js
@@ -50,6 +50,15 @@ class ModalSubmitFields {
   getTextInputValue(customId) {
     return this.getField(customId, ComponentType.TextInput).value;
   }
+
+  /**
+   * Gets the values of a select menu component given a custom id
+   * @param {string} customId The custom id for the select menu component
+   * @returns {string[]}
+   */
+  getSelectMenuValues(customId) {
+    return this.getField(customId, ComponentType.SelectMenu).values;
+  }
 }
 
 module.exports = ModalSubmitFields;
diff --git a/src/structures/SelectMenuBuilder.js b/src/structures/SelectMenuBuilder.js
index 0e6656ccb2600caba6ecda97fca0f6b82eeb9e32..3bccdb1d9b756940f2c7f8d532c6f779e44ae0a4 100644
--- a/src/structures/SelectMenuBuilder.js
+++ b/src/structures/SelectMenuBuilder.js
@@ -1,54 +1,12 @@
 'use strict';
 
-const { SelectMenuBuilder: BuildersSelectMenu, isJSONEncodable, normalizeArray } = require('@discordjs/builders');
-const { toSnakeCase } = require('../util/Transformers');
-const { parseEmoji } = require('../util/Util');
+const { SelectMenuBuilder: BuildersSelectMenu, isJSONEncodable } = require('@discordjs/builders');
 
 /**
  * Class used to build select menu components to be sent through the API
  * @extends {BuildersSelectMenu}
  */
 class SelectMenuBuilder extends BuildersSelectMenu {
-  constructor({ options, ...data } = {}) {
-    super(
-      toSnakeCase({
-        ...data,
-        options: options?.map(({ emoji, ...option }) => ({
-          ...option,
-          emoji: emoji && typeof emoji === 'string' ? parseEmoji(emoji) : emoji,
-        })),
-      }),
-    );
-  }
-
-  /**
-   * Adds options to this select menu
-   * @param {RestOrArray<APISelectMenuOption>} options The options to add to this select menu
-   * @returns {SelectMenuBuilder}
-   */
-  addOptions(...options) {
-    return super.addOptions(
-      normalizeArray(options).map(({ emoji, ...option }) => ({
-        ...option,
-        emoji: emoji && typeof emoji === 'string' ? parseEmoji(emoji) : emoji,
-      })),
-    );
-  }
-
-  /**
-   * Sets the options on this select menu
-   * @param {RestOrArray<APISelectMenuOption>} options The options to set on this select menu
-   * @returns {SelectMenuBuilder}
-   */
-  setOptions(...options) {
-    return super.setOptions(
-      normalizeArray(options).map(({ emoji, ...option }) => ({
-        ...option,
-        emoji: emoji && typeof emoji === 'string' ? parseEmoji(emoji) : emoji,
-      })),
-    );
-  }
-
   /**
    * Creates a new select menu builder from json data
    * @param {JSONEncodable<APISelectMenuComponent> | APISelectMenuComponent} other The other data
diff --git a/src/structures/SelectMenuOptionBuilder.js b/src/structures/SelectMenuOptionBuilder.js
index c5f0bd136b60f4ba424d9b6450c9524298d661b3..137cc4590ce3ec9240b03db0c2a7bb688d8f778a 100644
--- a/src/structures/SelectMenuOptionBuilder.js
+++ b/src/structures/SelectMenuOptionBuilder.js
@@ -1,34 +1,12 @@
 'use strict';
 
 const { SelectMenuOptionBuilder: BuildersSelectMenuOption, isJSONEncodable } = require('@discordjs/builders');
-const { toSnakeCase } = require('../util/Transformers');
-const { parseEmoji } = require('../util/Util');
 
 /**
  * Represents a select menu option builder.
  * @extends {BuildersSelectMenuOption}
  */
 class SelectMenuOptionBuilder extends BuildersSelectMenuOption {
-  constructor({ emoji, ...data } = {}) {
-    super(
-      toSnakeCase({
-        ...data,
-        emoji: emoji && typeof emoji === 'string' ? parseEmoji(emoji) : emoji,
-      }),
-    );
-  }
-  /**
-   * Sets the emoji to display on this option
-   * @param {ComponentEmojiResolvable} emoji The emoji to display on this option
-   * @returns {SelectMenuOptionBuilder}
-   */
-  setEmoji(emoji) {
-    if (typeof emoji === 'string') {
-      return super.setEmoji(parseEmoji(emoji));
-    }
-    return super.setEmoji(emoji);
-  }
-
   /**
    * Creates a new select menu option builder from JSON data
    * @param {JSONEncodable<APISelectMenuOption>|APISelectMenuOption} other The other data
diff --git a/src/util/Util.js b/src/util/Util.js
index 8d4dd7c5533b94c9c414da266b60d611b448e0f7..ec1382a9457babb69c1ec26f4dc9b9a9c1c7db31 100644
--- a/src/util/Util.js
+++ b/src/util/Util.js
@@ -355,17 +355,14 @@ function moveElementInArray(array, element, newIndex, offset = false) {
  * @param {string} data The string resolvable to resolve
  * @param {Function} [error] The Error constructor to instantiate. Defaults to Error
  * @param {string} [errorMessage] The error message to throw with. Defaults to "Expected string, got <data> instead."
- * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed
  * @returns {string}
  */
 function verifyString(
   data,
   error = Error,
   errorMessage = `Expected a string, got ${data} instead.`,
-  allowEmpty = true,
 ) {
   if (typeof data !== 'string') throw new error(errorMessage);
-  if (!allowEmpty && data.length === 0) throw new error(errorMessage);
   return data;
 }
 
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 8fa5126b647de275d22bfd2965a15c25e2fb72d9..fb98b7fe8e918efa0967995320106ddaf728dd42 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -259,7 +259,7 @@ export class ActionRowBuilder<T extends AnyComponentBuilder = AnyComponentBuilde
 }
 
 export type MessageActionRowComponent = ButtonComponent | SelectMenuComponent;
-export type ModalActionRowComponent = TextInputComponent;
+export type ModalActionRowComponent = TextInputComponent | SelectMenuComponent;
 
 export class ActionRow<T extends MessageActionRowComponent | ModalActionRowComponent> extends Component<
   APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>
@@ -398,20 +398,15 @@ export interface InteractionResponseFields<Cached extends CacheType = CacheType>
   replied: boolean;
   webhook: InteractionWebhook;
   reply(options: InteractionReplyOptions & { fetchReply: true }): Promise<Message>;
-  reply(options: string | MessagePayload | InteractionReplyOptions): Promise<void>;
+  reply(
+    options: string | MessagePayload | InteractionReplyOptions,
+  ): Promise<InteractionResponse<BooleanCache<Cached>>>;
   deleteReply(): Promise<void>;
   editReply(options: string | MessagePayload | WebhookEditMessageOptions): Promise<Message>;
   deferReply(options: InteractionDeferReplyOptions & { fetchReply: true }): Promise<Message>;
-  deferReply(options?: InteractionDeferReplyOptions): Promise<void>;
+  deferReply(options?: InteractionDeferReplyOptions): Promise<InteractionResponse<BooleanCache<Cached>>>;
   fetchReply(): Promise<Message>;
   followUp(options: string | MessagePayload | InteractionReplyOptions): Promise<Message>;
-  showModal(
-    modal:
-      | JSONEncodable<APIModalInteractionResponseCallbackData>
-      | ModalComponentData
-      | APIModalInteractionResponseCallbackData,
-  ): Promise<void>;
-  awaitModalSubmit(options: AwaitModalSubmitOptions<ModalSubmitInteraction>): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export type BooleanCache<T extends CacheType> = T extends 'cached' ? true : false;
@@ -631,7 +626,7 @@ export class SelectMenuOptionBuilder extends BuildersSelectMenuOption {
 }
 
 export class ModalBuilder extends BuildersModal {
-  public constructor(data?: ModalData | APIModalComponent);
+  public constructor(data?: Partial<ModalComponentData> | Partial<APIModalComponent>);
   public static from(other: JSONEncodable<APIModalComponent> | APIModalComponent): ModalBuilder;
 }
 
@@ -1368,7 +1363,7 @@ export class GuildScheduledEvent<S extends GuildScheduledEventStatus = GuildSche
   public creator: User | null;
   public get createdTimestamp(): number;
   public get createdAt(): Date;
-  public get scheduledStartAt(): Date;
+  public get scheduledStartAt(): Date | null;
   public get scheduledEndAt(): Date | null;
   public get channel(): VoiceChannel | StageChannel | null;
   public get guild(): Guild | null;
@@ -1470,7 +1465,7 @@ export class IntentsBitField extends BitField<GatewayIntentsString> {
   public static resolve(bit?: BitFieldResolvable<GatewayIntentsString, number>): number;
 }
 
-export type CacheType = 'cached' | 'raw' | undefined;
+export type CacheType = 'cached' | 'raw' | 'DM' | 'cachedOrDM' | undefined;
 
 export type CacheTypeReducer<
   State extends CacheType,
@@ -1478,12 +1473,18 @@ export type CacheTypeReducer<
   RawType = CachedType,
   PresentType = CachedType | RawType,
   Fallback = PresentType | null,
+  DMType = CachedType,
+  CachedOrDMType = CachedType | DMType,
 > = [State] extends ['cached']
   ? CachedType
   : [State] extends ['raw']
   ? RawType
   : [State] extends ['raw' | 'cached']
   ? PresentType
+  : [State] extends ['DM']
+  ? DMType
+  : [State] extends ['cachedOrDM']
+  ? CachedOrDMType
   : Fallback;
 
 export type AnyInteraction<Cached extends CacheType = CacheType> =
@@ -1505,7 +1506,8 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
-    TextBasedChannel | null
+    TextBasedChannel | null,
+    DMChannel | null
   >;
   public channelId: Snowflake | null;
   public get createdAt(): Date;
@@ -1513,7 +1515,7 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
   public get guild(): CacheTypeReducer<Cached, Guild, null>;
   public guildId: CacheTypeReducer<Cached, Snowflake>;
   public id: Snowflake;
-  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember>;
+  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember, GuildMember | APIInteractionGuildMember | null, null>;
   public readonly token: string;
   public type: InteractionType;
   public user: User;
@@ -1734,16 +1736,15 @@ export class Message<Cached extends boolean = boolean> extends Base {
 }
 
 export class AttachmentBuilder {
-  public constructor(attachment: BufferResolvable | Stream, data?: AttachmentData);
+  public constructor(data?: Partial<AttachmentPayload>);
   public attachment: BufferResolvable | Stream;
-  public description: string | null;
-  public name: string | null;
+  public data: Exclude<AttachmentPayload, 'attachment'>;
   public get spoiler(): boolean;
   public setDescription(description: string): this;
-  public setFile(attachment: BufferResolvable | Stream, name?: string): this;
+  public setFile(attachment: BufferResolvable | Stream): this;
   public setName(name: string): this;
   public setSpoiler(spoiler?: boolean): this;
-  public toJSON(): unknown;
+  public toJSON(): AttachmentPayload;
   public static from(other: JSONEncodable<AttachmentPayload>): AttachmentBuilder;
 }
 
@@ -1922,7 +1923,10 @@ export class MessageReaction {
 export interface ModalComponentData {
   customId: string;
   title: string;
-  components: (ActionRow<ModalActionRowComponent> | ActionRowData<ModalActionRowComponentData>)[];
+  components: (
+    | JSONEncodable<APIActionRowComponent<APIModalActionRowComponent>>
+    | ActionRowData<ModalActionRowComponentData>
+  )[];
 }
 
 export interface BaseModalData {
@@ -1935,12 +1939,17 @@ export interface TextInputModalData extends BaseModalData {
   value: string;
 }
 
+export interface SelectMenuModalData extends BaseModalData {
+  type: ComponentType.SelectMenu;
+  values: string[];
+}
+
 export interface ActionRowModalData {
   type: ComponentType.ActionRow;
   components: ModalData[];
 }
 
-export type ModalData = TextInputModalData | ActionRowModalData;
+export type ModalData = ActionRowModalData | TextInputModalData | SelectMenuModalData;
 
 export class ModalSubmitFields {
   constructor(components: ModalActionRowComponent[][]);
@@ -1949,6 +1958,7 @@ export class ModalSubmitFields {
   public getField<T extends ComponentType>(customId: string, type: T): { type: T } & ModalData;
   public getField(customId: string, type?: ComponentType): ModalData;
   public getTextInputValue(customId: string): string;
+  public getSelectMenuValues(customId: string): string[];
 }
 
 export interface ModalMessageModalSubmitInteraction<Cached extends CacheType = CacheType>
@@ -3251,7 +3261,7 @@ export class ApplicationCommandPermissionsManager<
     },
   ): Promise<boolean>;
   public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
-  public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
+  public fetch(options?: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
   public remove(
     options:
       | (FetchSingleOptions & {
@@ -3707,11 +3717,6 @@ export interface BaseApplicationCommandData {
   defaultMemberPermissions?: PermissionResolvable;
 }
 
-export interface AttachmentData {
-  name?: string;
-  description?: string;
-}
-
 export type CommandOptionDataTypeResolvable = ApplicationCommandOptionType;
 
 export type CommandOptionChannelResolvableType = ApplicationCommandOptionType.Channel;
@@ -4993,10 +4998,8 @@ export interface MessageEditOptions {
   files?: (
     | BufferResolvable
     | Stream
-    | JSONEncodable<APIAttachment>
-    | Attachment
-    | AttachmentBuilder
     | AttachmentPayload
+    | JSONEncodable<AttachmentPayload>
   )[];
   flags?: BitFieldResolvable<MessageFlagsString, number>;
   allowedMentions?: MessageMentionOptions;
@@ -5051,10 +5054,8 @@ export interface MessageOptions {
   files?: (
     | BufferResolvable
     | Stream
-    | JSONEncodable<APIAttachment>
-    | Attachment
-    | AttachmentBuilder
     | AttachmentPayload
+    | JSONEncodable<AttachmentPayload>
   )[];
   reply?: ReplyOptions;
   stickers?: StickerResolvable[];
