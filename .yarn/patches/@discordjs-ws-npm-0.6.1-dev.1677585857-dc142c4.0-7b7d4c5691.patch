diff --git a/dist/defaultWorker.js b/dist/defaultWorker.js
index dea39203bd2e0869ef2da32f096926168d357b87..6645b79bd9185af283cc311277a93e3713a8a96a 100644
--- a/dist/defaultWorker.js
+++ b/dist/defaultWorker.js
@@ -492,7 +492,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
       `Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`
     ]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -767,6 +767,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
         this.debug([
           `Starting to heartbeat every ${payload.d.heartbeat_interval}ms`
         ]);
+        await this.heartbeat(true);
         this.heartbeatInterval = (0, import_node_timers.setInterval)(() => void this.heartbeat(), payload.d.heartbeat_interval);
         break;
       }
diff --git a/dist/defaultWorker.mjs b/dist/defaultWorker.mjs
index 69cdacd40fade0abdf0be766b0ad439b43053839..cbc2e94a4ebe3794e8e693dca69cd59ea9e93028 100644
--- a/dist/defaultWorker.mjs
+++ b/dist/defaultWorker.mjs
@@ -470,7 +470,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
       `Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`
     ]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -745,6 +745,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
         this.debug([
           `Starting to heartbeat every ${payload.d.heartbeat_interval}ms`
         ]);
+        await this.heartbeat(true);
         this.heartbeatInterval = setInterval(() => void this.heartbeat(), payload.d.heartbeat_interval);
         break;
       }
diff --git a/dist/index.js b/dist/index.js
index bbef0e7f7f76f655a3af5543793ee6eb93dac674..be03287d05c27468983135d848e8e117a884e1b8 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -652,7 +652,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
       `Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`
     ]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -927,6 +927,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
         this.debug([
           `Starting to heartbeat every ${payload.d.heartbeat_interval}ms`
         ]);
+        await this.heartbeat(true);
         this.heartbeatInterval = (0, import_node_timers.setInterval)(() => void this.heartbeat(), payload.d.heartbeat_interval);
         break;
       }
diff --git a/dist/index.mjs b/dist/index.mjs
index 4483d4d03a165878a08dd9ff538b883335f4b582..36895621b628fa6a4fc0d8dd90db6184a8b4c881 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -611,7 +611,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
       `Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`
     ]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -886,6 +886,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
         this.debug([
           `Starting to heartbeat every ${payload.d.heartbeat_interval}ms`
         ]);
+        await this.heartbeat(true);
         this.heartbeatInterval = setInterval(() => void this.heartbeat(), payload.d.heartbeat_interval);
         break;
       }
