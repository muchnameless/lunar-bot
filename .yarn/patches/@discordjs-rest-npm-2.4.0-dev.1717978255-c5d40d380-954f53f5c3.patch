diff --git a/dist/index.d.mts b/dist/index.d.mts
index 58c88f069899432098a66fffa5efae46071f2d8f..e71c895b6c75c54ebdcfc7fb89738b39bb473124 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -357,6 +357,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -802,6 +803,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 58c88f069899432098a66fffa5efae46071f2d8f..e71c895b6c75c54ebdcfc7fb89738b39bb473124 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -357,6 +357,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -802,6 +803,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/index.js b/dist/index.js
index b05f1827a4a4a4586b4f66eef44df5411a9c1f9c..ca12410f78ce6cfc40f25052662d7457d127e7d2 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -224,6 +224,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -698,7 +699,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -779,10 +780,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -830,7 +831,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -999,7 +1000,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -1024,10 +1025,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1127,7 +1128,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1169,12 +1170,14 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1199,7 +1202,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1215,7 +1217,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1224,7 +1225,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1233,7 +1234,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1242,7 +1243,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1251,7 +1252,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1260,7 +1261,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1338,21 +1339,21 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request2.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request2.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request2.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request2.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request2.reason);
     }
     const url = `${options.api}${request2.versioned === false ? "" : `/v${options.version}`}${request2.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request2.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request2.files.entries()) {
@@ -1391,7 +1392,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
     const method = request2.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request2.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/index.mjs b/dist/index.mjs
index 9d87fc333c6271f76ae8200c2ca2e488636fdbfe..77ec279e3584aeadd7ca6c25661996de5a5cd31e 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -183,6 +183,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -657,7 +658,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -738,10 +739,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -789,7 +790,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -958,7 +959,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -983,10 +984,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1086,7 +1087,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1128,12 +1129,14 @@ var REST = class _REST extends AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1158,7 +1161,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1174,7 +1176,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1183,7 +1184,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1192,7 +1193,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1201,7 +1202,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1210,7 +1211,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1219,7 +1220,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1297,21 +1298,21 @@ var REST = class _REST extends AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request2.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request2.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request2.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request2.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request2.reason);
     }
     const url = `${options.api}${request2.versioned === false ? "" : `/v${options.version}`}${request2.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request2.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request2.files.entries()) {
@@ -1350,7 +1351,7 @@ var REST = class _REST extends AsyncEventEmitter {
     const method = request2.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request2.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/web.d.mts b/dist/web.d.mts
index 58c88f069899432098a66fffa5efae46071f2d8f..e71c895b6c75c54ebdcfc7fb89738b39bb473124 100644
--- a/dist/web.d.mts
+++ b/dist/web.d.mts
@@ -357,6 +357,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -802,6 +803,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/web.d.ts b/dist/web.d.ts
index 58c88f069899432098a66fffa5efae46071f2d8f..e71c895b6c75c54ebdcfc7fb89738b39bb473124 100644
--- a/dist/web.d.ts
+++ b/dist/web.d.ts
@@ -357,6 +357,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -802,6 +803,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/web.js b/dist/web.js
index 7d13f07820fa0d109d22e7e1104fdeb6bf3036a1..923e79b8d873423848351efa094c01aa8ef33c4c 100644
--- a/dist/web.js
+++ b/dist/web.js
@@ -158,6 +158,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -632,7 +633,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -713,10 +714,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -764,7 +765,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -933,7 +934,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -958,10 +959,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1061,7 +1062,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1103,12 +1104,14 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1133,7 +1136,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1149,7 +1151,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1158,7 +1159,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1167,7 +1168,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1176,7 +1177,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1185,7 +1186,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1194,7 +1195,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1272,21 +1273,21 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request.reason);
     }
     const url = `${options.api}${request.versioned === false ? "" : `/v${options.version}`}${request.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request.files.entries()) {
@@ -1325,7 +1326,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
     const method = request.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/web.mjs b/dist/web.mjs
index 489c24b837a20955669f0bcba3c63bce6028e65d..a3de35a33201616c356c936c9540159558413e06 100644
--- a/dist/web.mjs
+++ b/dist/web.mjs
@@ -115,6 +115,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -589,7 +590,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -670,10 +671,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -721,7 +722,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -890,7 +891,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -915,10 +916,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1018,7 +1019,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1060,12 +1061,14 @@ var REST = class _REST extends AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1090,7 +1093,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1106,7 +1108,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1115,7 +1116,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1124,7 +1125,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1133,7 +1134,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1142,7 +1143,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1151,7 +1152,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1229,21 +1230,21 @@ var REST = class _REST extends AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request.reason);
     }
     const url = `${options.api}${request.versioned === false ? "" : `/v${options.version}`}${request.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request.files.entries()) {
@@ -1282,7 +1283,7 @@ var REST = class _REST extends AsyncEventEmitter {
     const method = request.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
