diff --git a/src/client/websocket/WebSocketManager.js b/src/client/websocket/WebSocketManager.js
index 7a1831ad6aea4ae919ca2ce3e7344229219a9f8a..3b5e55a2a590c48ed5a7a3ec2f189bdf66fdfacb 100644
--- a/src/client/websocket/WebSocketManager.js
+++ b/src/client/websocket/WebSocketManager.js
@@ -153,7 +153,7 @@ class WebSocketManager extends EventEmitter {
         updateSessionInfo: (shardId, sessionInfo) => {
           this.shards.get(shardId).sessionInfo = sessionInfo;
         },
-        compression: zlib ? CompressionMethod.ZlibStream : null,
+        compression: zlib ? CompressionMethod.ZlibSync : null,
       };
       if (ws.buildIdentifyThrottler) wsOptions.buildIdentifyThrottler = ws.buildIdentifyThrottler;
       if (ws.buildStrategy) wsOptions.buildStrategy = ws.buildStrategy;
@@ -224,8 +224,8 @@ class WebSocketManager extends EventEmitter {
    * @private
    */
   attachEvents() {
-    this._ws.on(WSWebSocketShardEvents.Debug, ({ message, shardId }) => this.debug([message], shardId));
-    this._ws.on(WSWebSocketShardEvents.Dispatch, ({ data, shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Debug, (message, shardId) => this.debug([message], shardId));
+    this._ws.on(WSWebSocketShardEvents.Dispatch, (data, shardId) => {
       this.client.emit(Events.Raw, data, shardId);
       this.emit(data.t, data.d, shardId);
       const shard = this.shards.get(shardId);
@@ -235,11 +235,11 @@ class WebSocketManager extends EventEmitter {
       }
     });
 
-    this._ws.on(WSWebSocketShardEvents.Ready, ({ data, shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Ready, (data, shardId) => {
       this.shards.get(shardId).onReadyPacket(data);
     });
 
-    this._ws.on(WSWebSocketShardEvents.Closed, ({ code, shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Closed, (code, shardId) => {
       const shard = this.shards.get(shardId);
       shard.emit(WebSocketShardEvents.Close, { code, reason: reasonIsDeprecated, wasClean: true });
       if (UNRESUMABLE_CLOSE_CODES.includes(code) && this.destroyed) {
@@ -263,7 +263,7 @@ class WebSocketManager extends EventEmitter {
        */
       this.client.emit(Events.ShardReconnecting, shardId);
     });
-    this._ws.on(WSWebSocketShardEvents.Hello, ({ shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Hello, shardId => {
       const shard = this.shards.get(shardId);
       if (shard.sessionInfo) {
         shard.closeSequence = shard.sessionInfo.sequence;
@@ -273,7 +273,7 @@ class WebSocketManager extends EventEmitter {
       }
     });
 
-    this._ws.on(WSWebSocketShardEvents.Resumed, ({ shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Resumed, shardId => {
       const shard = this.shards.get(shardId);
       shard.status = Status.Ready;
       /**
@@ -283,14 +283,14 @@ class WebSocketManager extends EventEmitter {
       shard.emit(WebSocketShardEvents.Resumed);
     });
 
-    this._ws.on(WSWebSocketShardEvents.HeartbeatComplete, ({ heartbeatAt, latency, shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.HeartbeatComplete, ({ heartbeatAt, latency }, shardId) => {
       this.debug([`Heartbeat acknowledged, latency of ${latency}ms.`], shardId);
       const shard = this.shards.get(shardId);
       shard.lastPingTimestamp = heartbeatAt;
       shard.ping = latency;
     });
 
-    this._ws.on(WSWebSocketShardEvents.Error, ({ error, shardId }) => {
+    this._ws.on(WSWebSocketShardEvents.Error, (error, shardId) => {
       /**
        * Emitted whenever a shard's WebSocket encounters a connection error.
        * @event Client#shardError
@@ -341,7 +341,7 @@ class WebSocketManager extends EventEmitter {
       const item = this.packetQueue.shift();
       setImmediate(() => {
         this.handlePacket(item.packet, item.shard);
-      }).unref();
+      });
     }
 
     if (packet && PacketHandlers[packet.t]) {
diff --git a/src/client/websocket/WebSocketShard.js b/src/client/websocket/WebSocketShard.js
index d3d8167f928a3486cad058eb4e99f56889702a92..f8239d9256b7b00937d601dc0dfc0eaefb686567 100644
--- a/src/client/websocket/WebSocketShard.js
+++ b/src/client/websocket/WebSocketShard.js
@@ -207,7 +207,7 @@ class WebSocketShard extends EventEmitter {
         this.emit(WebSocketShardEvents.AllReady, this.expectedGuilds);
       },
       hasGuildsIntent ? waitGuildTimeout : 0,
-    ).unref();
+    );
   }
 
   /**
diff --git a/src/managers/GuildManager.js b/src/managers/GuildManager.js
index 1ab9090bd1ee320874d444b58f528589bf459ad8..77d7b48fcb24d8fd53dab8eeb22d60a8dd90afd4 100644
--- a/src/managers/GuildManager.js
+++ b/src/managers/GuildManager.js
@@ -236,7 +236,7 @@ class GuildManager extends CachedManager {
           this.client.removeListener(Events.GuildCreate, handleGuild);
           this.client.decrementMaxListeners();
           resolve(this.client.guilds._add(data));
-        }, 10_000).unref();
+        }, 10_000);
       })
     );
   }
diff --git a/src/managers/GuildMemberManager.js b/src/managers/GuildMemberManager.js
index 909ac62131694fdf1e900e253be9cb5ea5117970..20ffdc0a19d346ee23eecdc9b74004cb6b0505bf 100644
--- a/src/managers/GuildMemberManager.js
+++ b/src/managers/GuildMemberManager.js
@@ -266,7 +266,7 @@ class GuildMemberManager extends CachedManager {
         this.client.removeListener(Events.GuildMembersChunk, handler);
         this.client.decrementMaxListeners();
         reject(new DiscordjsError(ErrorCodes.GuildMembersTimeout));
-      }, time).unref();
+      }, time);
       this.client.incrementMaxListeners();
       this.client.on(Events.GuildMembersChunk, handler);
     });
diff --git a/src/structures/AttachmentBuilder.js b/src/structures/AttachmentBuilder.js
index 7072345248719a0c8165332d660bae70d6f425b9..5dcda05b8afe856a4c9ebbbb34ce8b549b72007f 100644
--- a/src/structures/AttachmentBuilder.js
+++ b/src/structures/AttachmentBuilder.js
@@ -1,16 +1,16 @@
 'use strict';
 
-const { basename, flatten } = require('../util/Util');
+const { isJSONEncodable } = require('@discordjs/builders');
+const { basename } = require('../util/Util');
 
 /**
  * Represents an attachment builder
  */
 class AttachmentBuilder {
   /**
-   * @param {BufferResolvable|Stream} attachment The file
-   * @param {AttachmentData} [data] Extra data
+   * @param {AttachmentPayload} [payload] Attachment and extra data
    */
-  constructor(attachment, data = {}) {
+  constructor({ attachment, name, description } = {}) {
     /**
      * The file associated with this attachment.
      * @type {BufferResolvable|Stream}
@@ -20,12 +20,12 @@ class AttachmentBuilder {
      * The name of this attachment
      * @type {?string}
      */
-    this.name = data.name;
+    this.name = name;
     /**
      * The description of the attachment
      * @type {?string}
      */
-    this.description = data.description;
+    this.description = description;
   }
 
   /**
@@ -82,11 +82,11 @@ class AttachmentBuilder {
    * @readonly
    */
   get spoiler() {
-    return basename(this.name).startsWith('SPOILER_');
+    return this.name ? basename(this.name).startsWith('SPOILER_') : false;
   }
 
   toJSON() {
-    return flatten(this);
+    return { ...this };
   }
 
   /**
@@ -95,10 +95,10 @@ class AttachmentBuilder {
    * @returns {AttachmentBuilder}
    */
   static from(other) {
-    return new AttachmentBuilder(other.attachment, {
-      name: other.name,
-      description: other.description,
-    });
+    if (isJSONEncodable(other)) {
+      return new this(other.toJSON());
+    }
+    return new this(other);
   }
 }
 
diff --git a/src/structures/Embed.js b/src/structures/Embed.js
index c1534ec679c438493d0df5db0108bbdd54c6db0d..af366ab584613312adc6d328ce736076def11a7d 100644
--- a/src/structures/Embed.js
+++ b/src/structures/Embed.js
@@ -18,11 +18,11 @@ class Embed {
 
   /**
    * An array of fields of this embed.
-   * @type {Array<APIEmbedField>}
+   * @type {?Array<APIEmbedField>}
    * @readonly
    */
   get fields() {
-    return this.data.fields ?? [];
+    return this.data.fields ?? null;
   }
 
   /**
diff --git a/src/structures/GuildEmoji.js b/src/structures/GuildEmoji.js
index a9f781a5360e4ff52466e92898de00f5af3a5bf2..62556d8b8fa6b60b835c9c07824bb3ba475b38df 100644
--- a/src/structures/GuildEmoji.js
+++ b/src/structures/GuildEmoji.js
@@ -55,8 +55,9 @@ class GuildEmoji extends BaseGuildEmoji {
    * @readonly
    */
   get deletable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
-    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageGuildExpressions);
+    const { me } = this.guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    return !this.managed && me.permissions.has(PermissionFlagsBits.ManageGuildExpressions);
   }
 
   /**
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index db71c66b5473477dc21a23e1229b38d408b4cc99..46f35ac5f3067751029d56b94b8f53798cc22d92 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -266,8 +266,9 @@ class GuildMember extends Base {
     if (this.user.id === this.guild.ownerId) return false;
     if (this.user.id === this.client.user.id) return false;
     if (this.client.user.id === this.guild.ownerId) return true;
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
-    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
+    const { me } = this.guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    return me.roles.highest.comparePositionTo(this.roles.highest) > 0;
   }
 
   /**
@@ -276,7 +277,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get kickable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);
   }
 
@@ -286,7 +286,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get bannable() {
-    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);
   }
 
@@ -299,7 +298,7 @@ class GuildMember extends Base {
     return (
       !this.permissions.has(PermissionFlagsBits.Administrator) &&
       this.manageable &&
-      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
+      this.guild.members.me.permissions.has(PermissionFlagsBits.ModerateMembers)
     );
   }
 
diff --git a/src/structures/GuildTemplate.js b/src/structures/GuildTemplate.js
index 7806867b5797c7bde034a7a9f9b7839fc7d74fc2..80a22365cb6799e394b751b86862c84170b74f24 100644
--- a/src/structures/GuildTemplate.js
+++ b/src/structures/GuildTemplate.js
@@ -149,7 +149,7 @@ class GuildTemplate extends Base {
       client.incrementMaxListeners();
       client.on(Events.GuildCreate, handleGuild);
 
-      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();
+      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000);
     });
   }
 
diff --git a/src/structures/Invite.js b/src/structures/Invite.js
index 4f597d20063b2d64000fdb53909bf506edb4f032..48c33891cfad63e3f493de07ce8eebe0ca106cbf 100644
--- a/src/structures/Invite.js
+++ b/src/structures/Invite.js
@@ -241,10 +241,11 @@ class Invite extends Base {
   get deletable() {
     const guild = this.guild;
     if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
-    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
+    const { me } = guild.members;
+    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);
     return Boolean(
       this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
-        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),
+        me.permissions.has(PermissionFlagsBits.ManageGuild),
     );
   }
 
diff --git a/src/structures/Message.js b/src/structures/Message.js
index 0fe2f762e3ac83ee0a140cca1499d02742a2e093..c08b2dde16f592710580667cc5f7858bdc38d669 100644
--- a/src/structures/Message.js
+++ b/src/structures/Message.js
@@ -335,10 +335,13 @@ class Message extends Base {
       this.client.channels._add(data.thread, this.guild);
     }
 
-    if (this.member && data.member) {
-      this.member._patch(data.member);
-    } else if (data.member && this.guild && this.author) {
-      this.guild.members._add(Object.assign(data.member, { user: this.author }));
+    if (data.member) {
+      const { member } = this;
+      if (member) {
+        member._patch(data.member);
+      } else if (this.author) {
+        this.guild?.members._add(Object.assign(data.member, { user: this.author }));
+      }
     }
 
     if ('flags' in data) {
@@ -678,19 +681,23 @@ class Message extends Base {
    * @readonly
    */
   get editable() {
-    const precheck = Boolean(this.author.id === this.client.user.id && (!this.guild || this.channel?.viewable));
+    const { channel } = this;
 
     // Regardless of permissions thread messages cannot be edited if
     // the thread is archived or the thread is locked and the bot does not have permission to manage threads.
-    if (this.channel?.isThread()) {
-      if (this.channel.archived) return false;
-      if (this.channel.locked) {
-        const permissions = this.channel.permissionsFor(this.client.user);
+    if (channel?.isThread()) {
+      if (channel.archived) return false;
+      if (channel.locked) {
+        const permissions = channel.permissionsFor(this.client.user);
         if (!permissions?.has(PermissionFlagsBits.ManageThreads, true)) return false;
       }
     }
 
-    return precheck;
+    return Boolean(
+      this.author.id === this.client.user.id &&
+        !this.flags.has(MessageFlags.Ephemeral) &&
+        (!this.guildId || channel?.viewable),
+    );
   }
 
   /**
@@ -701,15 +708,19 @@ class Message extends Base {
   get deletable() {
     if (UndeletableMessageTypes.includes(this.type)) return false;
 
-    if (!this.guild) {
+    if (this.flags.has(MessageFlags.Ephemeral)) {
+      return false;
+    }
+    if (!this.guildId) {
       return this.author.id === this.client.user.id;
     }
     // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.
-    if (!this.channel?.viewable) {
+    const { channel } = this;
+    if (!channel?.viewable) {
       return false;
     }
 
-    const permissions = this.channel?.permissionsFor(this.client.user);
+    const permissions = channel?.permissionsFor(this.client.user);
     if (!permissions) return false;
     // This flag allows deleting even if timed out
     if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;
@@ -748,7 +759,8 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       !this.system &&
-        (!this.guild ||
+        !this.flags.has(MessageFlags.Ephemeral) &&
+        (!this.guildId ||
           (channel?.viewable &&
             channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
     );
@@ -780,7 +792,7 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       channel?.type === ChannelType.GuildAnnouncement &&
-        !this.flags.has(MessageFlags.Crossposted) &&
+        !this.flags.any(MessageFlags.Crossposted | MessageFlags.Ephemeral) &&
         this.type === MessageType.Default &&
         !this.poll &&
         channel.viewable &&
@@ -799,8 +811,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   edit(options) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.edit(this, options);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.edit(this, options);
   }
 
   /**
@@ -815,8 +828,9 @@ class Message extends Base {
    * }
    */
   crosspost() {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.crosspost(this.id);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.crosspost(this.id);
   }
 
   /**
@@ -830,8 +844,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async pin(reason) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.pin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.pin(this.id, reason);
     return this;
   }
 
@@ -846,8 +861,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async unpin(reason) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.unpin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.unpin(this.id, reason);
     return this;
   }
 
@@ -867,13 +883,14 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async react(emoji) {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.react(this.id, emoji);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.react(this.id, emoji);
 
     return this.client.actions.MessageReactionAdd.handle(
       {
         [this.client.actions.injectedUser]: this.client.user,
-        [this.client.actions.injectedChannel]: this.channel,
+        [this.client.actions.injectedChannel]: channel,
         [this.client.actions.injectedMessage]: this,
         emoji: resolvePartialEmoji(emoji),
       },
@@ -891,8 +908,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async delete() {
-    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
-    await this.channel.messages.delete(this.id);
+    const { channel } = this;
+    if (!channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);
+    await channel.messages.delete(this.id);
     return this;
   }
 
@@ -914,7 +932,8 @@ class Message extends Base {
    *   .catch(console.error);
    */
   reply(options) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
     let data;
 
     if (options instanceof MessagePayload) {
@@ -927,7 +946,7 @@ class Message extends Base {
         },
       });
     }
-    return this.channel.send(data);
+    return channel.send(data);
   }
 
   /**
@@ -947,12 +966,13 @@ class Message extends Base {
    * @returns {Promise<ThreadChannel>}
    */
   startThread(options = {}) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(this.channel.type)) {
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(channel.type)) {
       return Promise.reject(new DiscordjsError(ErrorCodes.MessageThreadParent));
     }
     if (this.hasThread) return Promise.reject(new DiscordjsError(ErrorCodes.MessageExistingThread));
-    return this.channel.threads.create({ ...options, startMessage: this });
+    return channel.threads.create({ ...options, startMessage: this });
   }
 
   /**
@@ -961,8 +981,9 @@ class Message extends Base {
    * @returns {Promise<Message>}
    */
   fetch(force = true) {
-    if (!this.channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
-    return this.channel.messages.fetch({ message: this.id, force });
+    const { channel } = this;
+    if (!channel) return Promise.reject(new DiscordjsError(ErrorCodes.ChannelNotCached));
+    return channel.messages.fetch({ message: this.id, force });
   }
 
   /**
diff --git a/src/structures/MessagePayload.js b/src/structures/MessagePayload.js
index dad8ffedb026ec03387389b3a052a5b20b2a1f70..74d6776ad28fcbd867aaf0bcb0ae3fbdc1f978c1 100644
--- a/src/structures/MessagePayload.js
+++ b/src/structures/MessagePayload.js
@@ -4,7 +4,6 @@ const { Buffer } = require('node:buffer');
 const { lazy, isJSONEncodable } = require('@discordjs/util');
 const { DiscordSnowflake } = require('@sapphire/snowflake');
 const { MessageFlags } = require('discord-api-types/v10');
-const ActionRowBuilder = require('./ActionRowBuilder');
 const { DiscordjsError, DiscordjsRangeError, ErrorCodes } = require('../errors');
 const { resolveFile } = require('../util/DataResolver');
 const MessageFlagsBitField = require('../util/MessageFlagsBitField');
@@ -148,7 +147,7 @@ class MessagePayload {
     }
 
     const components = this.options.components?.map(component =>
-      (isJSONEncodable(component) ? component : new ActionRowBuilder(component)).toJSON(),
+      isJSONEncodable(component) ? component.toJSON() : this.target.client.options.jsonTransformer(component),
     );
 
     let username;
@@ -254,9 +253,9 @@ class MessagePayload {
    * @returns {Promise<MessagePayload>}
    */
   async resolveFiles() {
-    if (this.files) return this;
+    if (this.files || !this.options.files) return this;
 
-    this.files = await Promise.all(this.options.files?.map(file => this.constructor.resolveFile(file)) ?? []);
+    this.files = await Promise.all(this.options.files.map(file => this.constructor.resolveFile(file)));
     return this;
   }
 
diff --git a/src/structures/ModalSubmitFields.js b/src/structures/ModalSubmitFields.js
index a2f691f3ae9c2cbb44fe41f82a9fb9408c0b8020..c634e71d0ebf1e15043373b92927fd1279479f06 100644
--- a/src/structures/ModalSubmitFields.js
+++ b/src/structures/ModalSubmitFields.js
@@ -50,6 +50,15 @@ class ModalSubmitFields {
   getTextInputValue(customId) {
     return this.getField(customId, ComponentType.TextInput).value;
   }
+
+  /**
+   * Gets the values of a select menu component given a custom id
+   * @param {string} customId The custom id for the select menu component
+   * @returns {string[]}
+   */
+  getSelectMenuValues(customId) {
+    return this.getField(customId, ComponentType.SelectMenu).values;
+  }
 }
 
 module.exports = ModalSubmitFields;
diff --git a/src/structures/interfaces/Collector.js b/src/structures/interfaces/Collector.js
index 68bccc433462e666aaf4ab1a64bc454ffe3b5be6..46b3381903419359c4dc40f796c9a8effd3e7c88 100644
--- a/src/structures/interfaces/Collector.js
+++ b/src/structures/interfaces/Collector.js
@@ -93,8 +93,8 @@ class Collector extends EventEmitter {
     this.handleCollect = this.handleCollect.bind(this);
     this.handleDispose = this.handleDispose.bind(this);
 
-    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time).unref();
-    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle).unref();
+    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time);
+    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle);
 
     /**
      * The timestamp at which this collector last collected an item
@@ -135,7 +135,7 @@ class Collector extends EventEmitter {
         this.lastCollectedTimestamp = Date.now();
         if (this._idletimeout) {
           clearTimeout(this._idletimeout);
-          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle).unref();
+          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle);
         }
       } else {
         /**
@@ -247,11 +247,11 @@ class Collector extends EventEmitter {
   resetTimer({ time, idle } = {}) {
     if (this._timeout) {
       clearTimeout(this._timeout);
-      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time).unref();
+      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time);
     }
     if (this._idletimeout) {
       clearTimeout(this._idletimeout);
-      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle).unref();
+      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle);
     }
   }
 
diff --git a/src/util/Sweepers.js b/src/util/Sweepers.js
index edc328749f4a12bb77d91a06bbd9a7a9a91c8614..2edfb07cca9c56a87db51379cf29806979574948 100644
--- a/src/util/Sweepers.js
+++ b/src/util/Sweepers.js
@@ -480,7 +480,7 @@ class Sweepers {
       if (sweepFn === null) return;
       if (typeof sweepFn !== 'function') throw new DiscordjsTypeError(ErrorCodes.SweepFilterReturn);
       this[sweepKey](sweepFn);
-    }, opts.interval * 1_000).unref();
+    }, opts.interval * 1_000);
   }
 }
 
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 1dc3d97ea94ad5d707d01cb4c587568bf08b82af..2af7ac6d7d8bfd8c0ced5c4bb595c78b57bc7e3f 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -327,7 +327,13 @@ export type MessageActionRowComponent =
   | RoleSelectMenuComponent
   | MentionableSelectMenuComponent
   | ChannelSelectMenuComponent;
-export type ModalActionRowComponent = TextInputComponent;
+export type ModalActionRowComponent =
+  | TextInputComponent
+  | StringSelectMenuComponent
+  | UserSelectMenuComponent
+  | RoleSelectMenuComponent
+  | MentionableSelectMenuComponent
+  | ChannelSelectMenuComponent;
 
 export class ActionRow<ComponentType extends MessageActionRowComponent | ModalActionRowComponent> extends Component<
   APIActionRowComponent<APIMessageActionRowComponent | APIModalActionRowComponent>
@@ -729,6 +735,7 @@ export class ButtonInteraction<Cached extends CacheType = CacheType> extends Mes
     ButtonComponent,
     APIButtonComponent,
     ButtonComponent | APIButtonComponent,
+    ButtonComponent | APIButtonComponent,
     ButtonComponent | APIButtonComponent
   >;
   public inGuild(): this is ButtonInteraction<'raw' | 'cached'>;
@@ -903,7 +910,7 @@ export class EmbedBuilder extends BuildersEmbed {
 export class Embed {
   private constructor(data: APIEmbed);
   public readonly data: Readonly<APIEmbed>;
-  public get fields(): APIEmbedField[];
+  public get fields(): APIEmbedField[] | null;
   public get footer(): EmbedFooterData | null;
   public get title(): string | null;
   public get description(): string | null;
@@ -1889,7 +1896,7 @@ export class IntentsBitField extends BitField<GatewayIntentsString> {
   public static resolve(bit?: BitFieldResolvable<GatewayIntentsString, number>): number;
 }
 
-export type CacheType = 'cached' | 'raw' | undefined;
+export type CacheType = 'cached' | 'raw' | 'DM' | 'cachedOrDM' | undefined;
 
 export type CacheTypeReducer<
   State extends CacheType,
@@ -1897,13 +1904,19 @@ export type CacheTypeReducer<
   RawType = CachedType,
   PresentType = CachedType | RawType,
   Fallback = PresentType | null,
+  DMType = null,
+  CachedOrDMType = CachedType | DMType,
 > = [State] extends ['cached']
   ? CachedType
   : [State] extends ['raw']
     ? RawType
     : [State] extends ['raw' | 'cached']
       ? PresentType
-      : Fallback;
+      : [State] extends ['DM']
+        ? DMType
+        : [State] extends ['cachedOrDM']
+          ? CachedOrDMType
+          : Fallback;
 
 export type Interaction<Cached extends CacheType = CacheType> =
   | ChatInputCommandInteraction<Cached>
@@ -1929,7 +1942,8 @@ export class BaseInteraction<Cached extends CacheType = CacheType> extends Base
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
-    TextBasedChannel | null
+    TextBasedChannel | null,
+    DMChannel | null
   >;
   public channelId: Snowflake | null;
   public get createdAt(): Date;
@@ -2217,16 +2231,16 @@ export class Message<InGuild extends boolean = boolean> extends Base {
 }
 
 export class AttachmentBuilder {
-  public constructor(attachment: BufferResolvable | Stream, data?: AttachmentData);
+  public constructor(data?: Partial<AttachmentPayload>);
   public attachment: BufferResolvable | Stream;
   public description: string | null;
   public name: string | null;
   public get spoiler(): boolean;
   public setDescription(description: string): this;
-  public setFile(attachment: BufferResolvable | Stream, name?: string): this;
+  public setFile(attachment: BufferResolvable | Stream): this;
   public setName(name: string): this;
   public setSpoiler(spoiler?: boolean): this;
-  public toJSON(): unknown;
+  public toJSON(): AttachmentPayload;
   public static from(other: JSONEncodable<AttachmentPayload>): AttachmentBuilder;
 }
 
@@ -2279,6 +2293,7 @@ export class MessageComponentInteraction<Cached extends CacheType = CacheType> e
     MessageActionRowComponent,
     Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
     MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
+    MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>,
     MessageActionRowComponent | Exclude<APIMessageComponent, APIActionRowComponent<APIMessageActionRowComponent>>
   >;
   public componentType: Exclude<ComponentType, ComponentType.ActionRow | ComponentType.TextInput>;
@@ -2471,11 +2486,18 @@ export interface TextInputModalData extends BaseModalData {
   value: string;
 }
 
+export interface SelectMenuModalData extends BaseModalData {
+  type: ComponentType.SelectMenu;
+  values: string[];
+}
+
 export interface ActionRowModalData {
   type: ComponentType.ActionRow;
   components: readonly TextInputModalData[];
 }
 
+export type ModalData = ActionRowModalData | TextInputModalData | SelectMenuModalData;
+
 export class ModalSubmitFields {
   private constructor(components: readonly (readonly ModalActionRowComponent[])[]);
   public components: ActionRowModalData[];
@@ -2483,6 +2505,7 @@ export class ModalSubmitFields {
   public getField<Type extends ComponentType>(customId: string, type: Type): { type: Type } & TextInputModalData;
   public getField(customId: string, type?: ComponentType): TextInputModalData;
   public getTextInputValue(customId: string): string;
+  public getSelectMenuValues(customId: string): string[];
 }
 
 export interface ModalMessageModalSubmitInteraction<Cached extends CacheType = CacheType>
@@ -2820,6 +2843,7 @@ export class StringSelectMenuInteraction<
     StringSelectMenuComponent,
     APIStringSelectComponent,
     StringSelectMenuComponent | APIStringSelectComponent,
+    StringSelectMenuComponent | APIStringSelectComponent,
     StringSelectMenuComponent | APIStringSelectComponent
   >;
   public componentType: ComponentType.StringSelect;
@@ -2843,6 +2867,7 @@ export class UserSelectMenuInteraction<
     UserSelectMenuComponent,
     APIUserSelectComponent,
     UserSelectMenuComponent | APIUserSelectComponent,
+    UserSelectMenuComponent | APIUserSelectComponent,
     UserSelectMenuComponent | APIUserSelectComponent
   >;
   public componentType: ComponentType.UserSelect;
@@ -2866,6 +2891,7 @@ export class RoleSelectMenuInteraction<
     RoleSelectMenuComponent,
     APIRoleSelectComponent,
     RoleSelectMenuComponent | APIRoleSelectComponent,
+    RoleSelectMenuComponent | APIRoleSelectComponent,
     RoleSelectMenuComponent | APIRoleSelectComponent
   >;
   public componentType: ComponentType.RoleSelect;
@@ -2885,6 +2911,7 @@ export class MentionableSelectMenuInteraction<
     MentionableSelectMenuComponent,
     APIMentionableSelectComponent,
     MentionableSelectMenuComponent | APIMentionableSelectComponent,
+    MentionableSelectMenuComponent | APIMentionableSelectComponent,
     MentionableSelectMenuComponent | APIMentionableSelectComponent
   >;
   public componentType: ComponentType.MentionableSelect;
@@ -2909,6 +2936,7 @@ export class ChannelSelectMenuInteraction<
     ChannelSelectMenuComponent,
     APIChannelSelectComponent,
     ChannelSelectMenuComponent | APIChannelSelectComponent,
+    ChannelSelectMenuComponent | APIChannelSelectComponent,
     ChannelSelectMenuComponent | APIChannelSelectComponent
   >;
   public componentType: ComponentType.ChannelSelect;
@@ -4176,7 +4204,7 @@ export class ApplicationCommandPermissionsManager<
     },
   ): Promise<boolean>;
   public fetch(options: FetchSingleOptions): Promise<ApplicationCommandPermissions[]>;
-  public fetch(options: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
+  public fetch(options?: BaseOptions): Promise<Collection<Snowflake, ApplicationCommandPermissions[]>>;
   public remove(
     options:
       | (FetchSingleOptions & {
@@ -4780,11 +4808,6 @@ export interface BaseApplicationCommandData {
   integrationTypes?: readonly ApplicationIntegrationType[];
 }
 
-export interface AttachmentData {
-  name?: string;
-  description?: string;
-}
-
 export type CommandOptionDataTypeResolvable = ApplicationCommandOptionType;
 
 export type CommandOptionChannelResolvableType = ApplicationCommandOptionType.Channel;
@@ -6443,14 +6466,7 @@ export interface BaseMessageOptions {
   content?: string;
   embeds?: readonly (JSONEncodable<APIEmbed> | APIEmbed)[];
   allowedMentions?: MessageMentionOptions;
-  files?: readonly (
-    | BufferResolvable
-    | Stream
-    | JSONEncodable<APIAttachment>
-    | Attachment
-    | AttachmentBuilder
-    | AttachmentPayload
-  )[];
+  files?: readonly (BufferResolvable | Stream | AttachmentPayload | JSONEncodable<AttachmentPayload>)[];
   components?: readonly (
     | JSONEncodable<APIActionRowComponent<APIMessageActionRowComponent>>
     | ActionRowData<MessageActionRowComponentData | MessageActionRowComponentBuilder>
diff --git a/typings/index.test-d.ts b/typings/index.test-d.ts
index 02011850550aa344c7409ae508eb6fa19fa11912..6a918f22a7d823b4b297c7b8df4499785d72b23b 100644
--- a/typings/index.test-d.ts
+++ b/typings/index.test-d.ts
@@ -423,7 +423,7 @@ client.on('messageCreate', async message => {
   assertIsMessage(channel.send({}));
   assertIsMessage(channel.send({ embeds: [] }));
 
-  const attachment = new AttachmentBuilder('file.png');
+  const attachment = new AttachmentBuilder({ attachment: 'file.png' });
   const embed = new EmbedBuilder();
   assertIsMessage(channel.send({ files: [attachment] }));
   assertIsMessage(channel.send({ embeds: [embed] }));
