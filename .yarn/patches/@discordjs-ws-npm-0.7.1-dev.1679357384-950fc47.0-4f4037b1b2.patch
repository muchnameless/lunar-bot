diff --git a/dist/defaultWorker.js b/dist/defaultWorker.js
index 7f67f6ec8984e116f2f5c8a556e75402590396e1..31cb9df0f7213fb0286d35770fe69f37c5913656 100644
--- a/dist/defaultWorker.js
+++ b/dist/defaultWorker.js
@@ -445,7 +445,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -516,6 +516,8 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
     this.connection.send(JSON.stringify(payload));
   }
   async identify() {
+    this.debug(["Waiting for identify throttle"]);
+    await this.strategy.waitForIdentify();
     this.debug([
       "Identifying",
       `shard id: ${this.id.toString()}`,
@@ -523,7 +525,6 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
       `intents: ${this.strategy.options.intents}`,
       `compression: ${this.inflate ? "zlib-stream" : this.useIdentifyCompress ? "identify" : "none"}`
     ]);
-    await this.strategy.waitForIdentify();
     const d = {
       token: this.strategy.options.token,
       properties: this.strategy.options.identifyProperties,
diff --git a/dist/defaultWorker.mjs b/dist/defaultWorker.mjs
index 59aeecf8ffd25e147ae6a1f08b5bd52d7f4ef550..7b4762ccf2393c12ac2203948e21dd370811ef94 100644
--- a/dist/defaultWorker.mjs
+++ b/dist/defaultWorker.mjs
@@ -427,7 +427,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -498,6 +498,8 @@ var WebSocketShard = class extends AsyncEventEmitter {
     this.connection.send(JSON.stringify(payload));
   }
   async identify() {
+    this.debug(["Waiting for identify throttle"]);
+    await this.strategy.waitForIdentify();
     this.debug([
       "Identifying",
       `shard id: ${this.id.toString()}`,
@@ -505,7 +507,6 @@ var WebSocketShard = class extends AsyncEventEmitter {
       `intents: ${this.strategy.options.intents}`,
       `compression: ${this.inflate ? "zlib-stream" : this.useIdentifyCompress ? "identify" : "none"}`
     ]);
-    await this.strategy.waitForIdentify();
     const d = {
       token: this.strategy.options.token,
       properties: this.strategy.options.identifyProperties,
diff --git a/dist/index.js b/dist/index.js
index 0ce68ed40fc71c5a99aafd24266a2bf3e7b5280a..dc6b32a25dacf918dc91c9e51d2d861c2dbe7a57 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -647,7 +647,7 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -718,6 +718,8 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
     this.connection.send(JSON.stringify(payload));
   }
   async identify() {
+    this.debug(["Waiting for identify throttle"]);
+    await this.strategy.waitForIdentify();
     this.debug([
       "Identifying",
       `shard id: ${this.id.toString()}`,
@@ -725,7 +727,6 @@ var WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter
       `intents: ${this.strategy.options.intents}`,
       `compression: ${this.inflate ? "zlib-stream" : this.useIdentifyCompress ? "identify" : "none"}`
     ]);
-    await this.strategy.waitForIdentify();
     const d = {
       token: this.strategy.options.token,
       properties: this.strategy.options.identifyProperties,
diff --git a/dist/index.mjs b/dist/index.mjs
index fca14d975d47becefff4f007f88067c293a13e2e..7e5884d4d3e2c9f22b14ef0a5eb1865656e47d26 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -610,7 +610,7 @@ var WebSocketShard = class extends AsyncEventEmitter {
   async waitForEvent(event, timeoutDuration) {
     this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : "indefinitely"}`]);
     const controller = new AbortController();
-    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration).unref() : null;
+    const timeout = timeoutDuration ? setTimeout(() => controller.abort(), timeoutDuration) : null;
     if (timeout) {
       this.timeouts.set(event, timeout);
     }
@@ -681,6 +681,8 @@ var WebSocketShard = class extends AsyncEventEmitter {
     this.connection.send(JSON.stringify(payload));
   }
   async identify() {
+    this.debug(["Waiting for identify throttle"]);
+    await this.strategy.waitForIdentify();
     this.debug([
       "Identifying",
       `shard id: ${this.id.toString()}`,
@@ -688,7 +690,6 @@ var WebSocketShard = class extends AsyncEventEmitter {
       `intents: ${this.strategy.options.intents}`,
       `compression: ${this.inflate ? "zlib-stream" : this.useIdentifyCompress ? "identify" : "none"}`
     ]);
-    await this.strategy.waitForIdentify();
     const d = {
       token: this.strategy.options.token,
       properties: this.strategy.options.identifyProperties,
