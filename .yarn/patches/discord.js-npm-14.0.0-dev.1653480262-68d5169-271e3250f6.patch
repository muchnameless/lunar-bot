diff --git a/src/structures/ButtonBuilder.js b/src/structures/ButtonBuilder.js
index c427ce3c7516c88a36613255d6f7914aa7eb9ffa..76f2e245ab8950d81046526c554ad7cd46a32ee7 100644
--- a/src/structures/ButtonBuilder.js
+++ b/src/structures/ButtonBuilder.js
@@ -2,29 +2,14 @@
 
 const { ButtonBuilder: BuildersButton, isJSONEncodable } = require('@discordjs/builders');
 const Transformers = require('../util/Transformers');
-const Util = require('../util/Util');
 
 /**
  * Represents a button builder.
  * @extends {BuildersButton}
  */
 class ButtonBuilder extends BuildersButton {
-  constructor({ emoji, ...data } = {}) {
-    super(
-      Transformers.toSnakeCase({ ...data, emoji: emoji && typeof emoji === 'string' ? Util.parseEmoji(emoji) : emoji }),
-    );
-  }
-
-  /**
-   * Sets the emoji to display on this button
-   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button
-   * @returns {ButtonBuilder}
-   */
-  setEmoji(emoji) {
-    if (typeof emoji === 'string') {
-      return super.setEmoji(Util.parseEmoji(emoji));
-    }
-    return super.setEmoji(emoji);
+  constructor(data) {
+    super(Transformers.toSnakeCase(data));
   }
 
   /**
diff --git a/src/structures/GuildEmoji.js b/src/structures/GuildEmoji.js
index b0a8ff2fd421b6fee59a3376fd72485d2c23afda..ce920b9046f3677ffe23efb947313c2316f00cad 100644
--- a/src/structures/GuildEmoji.js
+++ b/src/structures/GuildEmoji.js
@@ -55,8 +55,9 @@ class GuildEmoji extends BaseGuildEmoji {
    * @readonly
    */
   get deletable() {
-    if (!this.guild.members.me) throw new Error('GUILD_UNCACHED_ME');
-    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
+    const { me } = this.guild.members;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
+    return !this.managed && me.permissions.has(PermissionFlagsBits.ManageEmojisAndStickers);
   }
 
   /**
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index f732ca75400e7b799abd52ed401b08941f1a9251..a99cc2252dc3ea0de248eed185952dcac6a7e65c 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -239,8 +239,9 @@ class GuildMember extends Base {
     if (this.user.id === this.guild.ownerId) return false;
     if (this.user.id === this.client.user.id) return false;
     if (this.client.user.id === this.guild.ownerId) return true;
-    if (!this.guild.members.me) throw new Error('GUILD_UNCACHED_ME');
-    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;
+    const { me } = this.guild.members;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
+    return me.roles.highest.comparePositionTo(this.roles.highest) > 0;
   }
 
   /**
@@ -249,7 +250,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get kickable() {
-    if (!this.guild.members.me) throw new Error('GUILD_UNCACHED_ME');
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);
   }
 
@@ -259,7 +259,6 @@ class GuildMember extends Base {
    * @readonly
    */
   get bannable() {
-    if (!this.guild.members.me) throw new Error('GUILD_UNCACHED_ME');
     return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);
   }
 
@@ -272,7 +271,7 @@ class GuildMember extends Base {
     return (
       !this.permissions.has(PermissionFlagsBits.Administrator) &&
       this.manageable &&
-      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)
+      this.guild.members.me.permissions.has(PermissionFlagsBits.ModerateMembers)
     );
   }
 
diff --git a/src/structures/Invite.js b/src/structures/Invite.js
index 03b41500f925306a972fc3fc8972c7443e1bb654..2f184fd87582988bc97781643ec99c4a41a329c1 100644
--- a/src/structures/Invite.js
+++ b/src/structures/Invite.js
@@ -233,10 +233,11 @@ class Invite extends Base {
   get deletable() {
     const guild = this.guild;
     if (!guild || !this.client.guilds.cache.has(guild.id)) return false;
-    if (!guild.members.me) throw new Error('GUILD_UNCACHED_ME');
+    const { me } = guild.members;
+    if (!me) throw new Error('GUILD_UNCACHED_ME');
     return Boolean(
       this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||
-        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),
+      me.permissions.has(PermissionFlagsBits.ManageGuild),
     );
   }
 
diff --git a/src/structures/Message.js b/src/structures/Message.js
index 4f69b4b1b8ccdadce0e7ab1518af9ac9bc5702e5..95138b5a0b6872d7ec2f746abe50298067ccd836 100644
--- a/src/structures/Message.js
+++ b/src/structures/Message.js
@@ -275,10 +275,13 @@ class Message extends Base {
       this.client.channels._add(data.thread, this.guild);
     }
 
-    if (this.member && data.member) {
-      this.member._patch(data.member);
-    } else if (data.member && this.guild && this.author) {
-      this.guild.members._add(Object.assign(data.member, { user: this.author }));
+    if (data.member) {
+      const { member } = this;
+      if (member) {
+        member._patch(data.member);
+      } else if (this.author) {
+        this.guild?.members._add(Object.assign(data.member, { user: this.author }));
+      }
     }
 
     if ('flags' in data) {
@@ -552,11 +555,16 @@ class Message extends Base {
    * @readonly
    */
   get editable() {
-    const precheck = Boolean(this.author.id === this.client.user.id && (!this.guild || this.channel?.viewable));
+    const { channel } = this;
+    const precheck = Boolean(
+      this.author.id === this.client.user.id &&
+      !this.flags.has(MessageFlags.Ephemeral) &&
+      (!this.guildId || channel?.viewable)
+    );
     // Regardless of permissions thread messages cannot be edited if
     // the thread is locked.
-    if (this.channel?.isThread()) {
-      return precheck && !this.channel.locked;
+    if (channel?.isThread()) {
+      return precheck && !channel.locked;
     }
     return precheck;
   }
@@ -567,23 +575,27 @@ class Message extends Base {
    * @readonly
    */
   get deletable() {
-    if (!this.guild) {
+    if (this.flags.has(MessageFlags.Ephemeral)) {
+      return false;
+    }
+    if (!this.guildId) {
       return this.author.id === this.client.user.id;
     }
     // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.
-    if (!this.channel?.viewable) {
+    const { channel } = this;
+    if (!channel?.viewable) {
       return false;
     }
 
-    const permissions = this.channel?.permissionsFor(this.client.user);
+    const permissions = channel?.permissionsFor(this.client.user);
     if (!permissions) return false;
     // This flag allows deleting even if timed out
     if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;
 
     return Boolean(
       this.author.id === this.client.user.id ||
-        (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
-          this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()),
+      (permissions.has(PermissionFlagsBits.ManageMessages, false) &&
+        this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()),
     );
   }
 
@@ -596,9 +608,10 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       !this.system &&
-        (!this.guild ||
-          (channel?.viewable &&
-            channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
+      !this.flags.has(MessageFlags.Ephemeral) &&
+      (!this.guildId ||
+        (channel?.viewable &&
+          channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),
     );
   }
 
@@ -627,10 +640,10 @@ class Message extends Base {
     const { channel } = this;
     return Boolean(
       channel?.type === ChannelType.GuildNews &&
-        !this.flags.has(MessageFlags.Crossposted) &&
-        this.type === MessageType.Default &&
-        channel.viewable &&
-        channel.permissionsFor(this.client.user)?.has(bitfield, false),
+      !this.flags.any(MessageFlags.Crossposted | MessageFlags.Ephemeral) &&
+      this.type === MessageType.Default &&
+      channel.viewable &&
+      channel.permissionsFor(this.client.user)?.has(bitfield, false),
     );
   }
 
@@ -660,8 +673,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   edit(options) {
-    if (!this.channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
-    return this.channel.messages.edit(this, options);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
+    return channel.messages.edit(this, options);
   }
 
   /**
@@ -676,8 +690,9 @@ class Message extends Base {
    * }
    */
   crosspost() {
-    if (!this.channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
-    return this.channel.messages.crosspost(this.id);
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
+    return channel.messages.crosspost(this.id);
   }
 
   /**
@@ -691,8 +706,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async pin(reason) {
-    if (!this.channel) throw new Error('CHANNEL_NOT_CACHED');
-    await this.channel.messages.pin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new Error('CHANNEL_NOT_CACHED');
+    await channel.messages.pin(this.id, reason);
     return this;
   }
 
@@ -707,8 +723,9 @@ class Message extends Base {
    *   .catch(console.error)
    */
   async unpin(reason) {
-    if (!this.channel) throw new Error('CHANNEL_NOT_CACHED');
-    await this.channel.messages.unpin(this.id, reason);
+    const { channel } = this;
+    if (!channel) throw new Error('CHANNEL_NOT_CACHED');
+    await channel.messages.unpin(this.id, reason);
     return this;
   }
 
@@ -728,13 +745,14 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async react(emoji) {
-    if (!this.channel) throw new Error('CHANNEL_NOT_CACHED');
-    await this.channel.messages.react(this.id, emoji);
+    const { channel } = this;
+    if (!channel) throw new Error('CHANNEL_NOT_CACHED');
+    await channel.messages.react(this.id, emoji);
 
     return this.client.actions.MessageReactionAdd.handle(
       {
         user: this.client.user,
-        channel: this.channel,
+        channel,
         message: this,
         emoji: Util.resolvePartialEmoji(emoji),
       },
@@ -752,8 +770,9 @@ class Message extends Base {
    *   .catch(console.error);
    */
   async delete() {
-    if (!this.channel) throw new Error('CHANNEL_NOT_CACHED');
-    await this.channel.messages.delete(this.id);
+    const { channel } = this;
+    if (!channel) throw new Error('CHANNEL_NOT_CACHED');
+    await channel.messages.delete(this.id);
     return this;
   }
 
@@ -776,7 +795,8 @@ class Message extends Base {
    *   .catch(console.error);
    */
   reply(options) {
-    if (!this.channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
     let data;
 
     if (options instanceof MessagePayload) {
@@ -789,7 +809,7 @@ class Message extends Base {
         },
       });
     }
-    return this.channel.send(data);
+    return channel.send(data);
   }
 
   /**
@@ -819,12 +839,13 @@ class Message extends Base {
    * @returns {Promise<ThreadChannel>}
    */
   startThread(options = {}) {
-    if (!this.channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
-    if (![ChannelType.GuildText, ChannelType.GuildNews].includes(this.channel.type)) {
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
+    if (![ChannelType.GuildText, ChannelType.GuildNews].includes(channel.type)) {
       return Promise.reject(new Error('MESSAGE_THREAD_PARENT'));
     }
     if (this.hasThread) return Promise.reject(new Error('MESSAGE_EXISTING_THREAD'));
-    return this.channel.threads.create({ ...options, startMessage: this });
+    return channel.threads.create({ ...options, startMessage: this });
   }
 
   /**
@@ -833,8 +854,9 @@ class Message extends Base {
    * @returns {Promise<Message>}
    */
   fetch(force = true) {
-    if (!this.channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
-    return this.channel.messages.fetch(this.id, { force });
+    const { channel } = this;
+    if (!channel) return Promise.reject(new Error('CHANNEL_NOT_CACHED'));
+    return channel.messages.fetch(this.id, { force });
   }
 
   /**
diff --git a/src/structures/MessagePayload.js b/src/structures/MessagePayload.js
index 2bbeb764cfc594ad727ab61f928b7c15b9f59b46..8a2153d72cfd3493e01816fd57c4fdafe6d2e3c5 100644
--- a/src/structures/MessagePayload.js
+++ b/src/structures/MessagePayload.js
@@ -105,7 +105,7 @@ class MessagePayload {
     if (this.options.content === null) {
       content = '';
     } else if (typeof this.options.content !== 'undefined') {
-      content = Util.verifyString(this.options.content, RangeError, 'MESSAGE_CONTENT_TYPE', true);
+      content = Util.verifyString(this.options.content, RangeError, 'MESSAGE_CONTENT_TYPE');
     }
 
     return content;
@@ -132,7 +132,7 @@ class MessagePayload {
       }
     }
 
-    const components = this.options.components?.map(c => (isJSONEncodable(c) ? c : new ActionRowBuilder(c)).toJSON());
+    const components = this.options.components?.map(c => isJSONEncodable(c) ? c.toJSON() : this.target.client.options.jsonTransformer(c));
 
     let username;
     let avatarURL;
diff --git a/src/structures/SelectMenuBuilder.js b/src/structures/SelectMenuBuilder.js
index 915f3bc688a758cf60da387ee86862ecc8d66903..7bfcf37986abbe6bb9cffa2e455bb2b2e7fc6215 100644
--- a/src/structures/SelectMenuBuilder.js
+++ b/src/structures/SelectMenuBuilder.js
@@ -1,52 +1,18 @@
 'use strict';
 
-const { SelectMenuBuilder: BuildersSelectMenu, isJSONEncodable } = require('@discordjs/builders');
+const {
+  SelectMenuBuilder: BuildersSelectMenu,
+  isJSONEncodable,
+} = require('@discordjs/builders');
 const Transformers = require('../util/Transformers');
-const Util = require('../util/Util');
 
 /**
  * Class used to build select menu components to be sent through the API
  * @extends {BuildersSelectMenu}
  */
 class SelectMenuBuilder extends BuildersSelectMenu {
-  constructor({ options, ...data } = {}) {
-    super(
-      Transformers.toSnakeCase({
-        ...data,
-        options: options?.map(({ emoji, ...option }) => ({
-          ...option,
-          emoji: emoji && typeof emoji === 'string' ? Util.parseEmoji(emoji) : emoji,
-        })),
-      }),
-    );
-  }
-
-  /**
-   * Adds options to this select menu
-   * @param {APISelectMenuOption[]} options The options to add to this select menu
-   * @returns {SelectMenuBuilder}
-   */
-  addOptions(options) {
-    return super.addOptions(
-      options.map(({ emoji, ...option }) => ({
-        ...option,
-        emoji: emoji && typeof emoji === 'string' ? Util.parseEmoji(emoji) : emoji,
-      })),
-    );
-  }
-
-  /**
-   * Sets the options on this select menu
-   * @param {APISelectMenuOption[]} options The options to set on this select menu
-   * @returns {SelectMenuBuilder}
-   */
-  setOptions(options) {
-    return super.setOptions(
-      options.map(({ emoji, ...option }) => ({
-        ...option,
-        emoji: emoji && typeof emoji === 'string' ? Util.parseEmoji(emoji) : emoji,
-      })),
-    );
+  constructor(data) {
+    super(Transformers.toSnakeCase(data));
   }
 
   /**
diff --git a/src/structures/SelectMenuOptionBuilder.js b/src/structures/SelectMenuOptionBuilder.js
index ea816bea2b39f6f864ae64e021686d428858fe3d..24f9a5bae8810b530323819fcf4e39ad45f8a113 100644
--- a/src/structures/SelectMenuOptionBuilder.js
+++ b/src/structures/SelectMenuOptionBuilder.js
@@ -2,31 +2,14 @@
 
 const { SelectMenuOptionBuilder: BuildersSelectMenuOption } = require('@discordjs/builders');
 const Transformers = require('../util/Transformers');
-const Util = require('../util/Util');
 
 /**
  * Represents a select menu option builder.
  * @extends {BuildersSelectMenuOption}
  */
 class SelectMenuOptionBuilder extends BuildersSelectMenuOption {
-  constructor({ emoji, ...data } = {}) {
-    super(
-      Transformers.toSnakeCase({
-        ...data,
-        emoji: emoji && typeof emoji === 'string' ? Util.parseEmoji(emoji) : emoji,
-      }),
-    );
-  }
-  /**
-   * Sets the emoji to display on this option
-   * @param {ComponentEmojiResolvable} emoji The emoji to display on this option
-   * @returns {SelectMenuOptionBuilder}
-   */
-  setEmoji(emoji) {
-    if (typeof emoji === 'string') {
-      return super.setEmoji(Util.parseEmoji(emoji));
-    }
-    return super.setEmoji(emoji);
+  constructor(data) {
+    super(Transformers.toSnakeCase(data));
   }
 }
 
diff --git a/src/util/Util.js b/src/util/Util.js
index a16cdbea6b5197fe4376ede0ad32db73ec0d1dfc..dd001e6e5dc1669b8816fbb6e072a10e03249571 100644
--- a/src/util/Util.js
+++ b/src/util/Util.js
@@ -359,17 +359,14 @@ class Util extends null {
    * @param {string} data The string resolvable to resolve
    * @param {Function} [error] The Error constructor to instantiate. Defaults to Error
    * @param {string} [errorMessage] The error message to throw with. Defaults to "Expected string, got <data> instead."
-   * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed
    * @returns {string}
    */
   static verifyString(
     data,
     error = Error,
     errorMessage = `Expected a string, got ${data} instead.`,
-    allowEmpty = true,
   ) {
     if (typeof data !== 'string') throw new error(errorMessage);
-    if (!allowEmpty && data.length === 0) throw new error(errorMessage);
     return data;
   }
 
diff --git a/typings/index.d.ts b/typings/index.d.ts
index eeaf9e0d0335f53d3f2025b7e3de4a34420fb78e..171c27b5af127584c4819242434d0ff71aef762a 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -383,17 +383,15 @@ export interface InteractionResponseFields<Cached extends CacheType = CacheType>
   replied: boolean;
   webhook: InteractionWebhook;
   reply(options: InteractionReplyOptions & { fetchReply: true }): Promise<GuildCacheMessage<Cached>>;
-  reply(options: string | MessagePayload | InteractionReplyOptions): Promise<void>;
+  reply(
+    options: string | MessagePayload | InteractionReplyOptions,
+  ): Promise<InteractionResponse<BooleanCache<Cached>>>;
   deleteReply(): Promise<void>;
   editReply(options: string | MessagePayload | WebhookEditMessageOptions): Promise<GuildCacheMessage<Cached>>;
   deferReply(options: InteractionDeferReplyOptions & { fetchReply: true }): Promise<GuildCacheMessage<Cached>>;
-  deferReply(options?: InteractionDeferReplyOptions): Promise<void>;
+  deferReply(options?: InteractionDeferReplyOptions): Promise<InteractionResponse<BooleanCache<Cached>>>;
   fetchReply(): Promise<GuildCacheMessage<Cached>>;
   followUp(options: string | MessagePayload | InteractionReplyOptions): Promise<GuildCacheMessage<Cached>>;
-  showModal(
-    modal: JSONEncodable<APIModalInteractionResponseCallbackData> | ModalData | APIModalInteractionResponseCallbackData,
-  ): Promise<void>;
-  awaitModalSubmit(options: AwaitModalSubmitOptions<ModalSubmitInteraction>): Promise<ModalSubmitInteraction<Cached>>;
 }
 
 export type BooleanCache<T extends CacheType> = T extends 'cached' ? true : false;
@@ -1434,7 +1432,7 @@ export class IntentsBitField extends BitField<GatewayIntentsString> {
   public static resolve(bit?: BitFieldResolvable<GatewayIntentsString, number>): number;
 }
 
-export type CacheType = 'cached' | 'raw' | undefined;
+export type CacheType = 'cached' | 'raw' | 'DM' | 'cachedOrDM' | undefined;
 
 export type CacheTypeReducer<
   State extends CacheType,
@@ -1442,12 +1440,18 @@ export type CacheTypeReducer<
   RawType = CachedType,
   PresentType = CachedType | RawType,
   Fallback = PresentType | null,
+  DMType = CachedType,
+  CachedOrDMType = CachedType | DMType,
 > = [State] extends ['cached']
   ? CachedType
   : [State] extends ['raw']
   ? RawType
   : [State] extends ['raw' | 'cached']
   ? PresentType
+  : [State] extends ['DM']
+  ? DMType
+  : [State] extends ['cachedOrDM']
+  ? CachedOrDMType
   : Fallback;
 
 export class Interaction<Cached extends CacheType = CacheType> extends Base {
@@ -1460,7 +1464,8 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
     GuildTextBasedChannel | null,
-    TextBasedChannel | null
+    TextBasedChannel | null,
+    DMChannel | null
   >;
   public channelId: Snowflake | null;
   public get createdAt(): Date;
@@ -1468,7 +1473,7 @@ export class Interaction<Cached extends CacheType = CacheType> extends Base {
   public get guild(): CacheTypeReducer<Cached, Guild, null>;
   public guildId: CacheTypeReducer<Cached, Snowflake>;
   public id: Snowflake;
-  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember>;
+  public member: CacheTypeReducer<Cached, GuildMember, APIInteractionGuildMember, GuildMember | APIInteractionGuildMember | null, null>;
   public readonly token: string;
   public type: InteractionType;
   public user: User;
