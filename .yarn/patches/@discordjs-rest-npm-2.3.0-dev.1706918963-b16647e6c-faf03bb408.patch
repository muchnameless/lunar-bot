diff --git a/dist/index.d.mts b/dist/index.d.mts
index afcc98547e3dd056599a958029f951e43d19f323..4f123c7afa380d19a67095c1b610f92f1152d0db 100644
--- a/dist/index.d.mts
+++ b/dist/index.d.mts
@@ -351,6 +351,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -780,6 +781,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/index.d.ts b/dist/index.d.ts
index afcc98547e3dd056599a958029f951e43d19f323..4f123c7afa380d19a67095c1b610f92f1152d0db 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -351,6 +351,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -780,6 +781,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/index.js b/dist/index.js
index 6b863e67f203bb84e68464badc042f52ae07a237..d3e7a1c7886bcffe9c74620d525ed598807410c7 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -223,6 +223,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -701,7 +702,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -782,10 +783,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -834,7 +835,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1003,7 +1004,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -1028,10 +1029,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1132,7 +1133,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1174,12 +1175,14 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1205,7 +1208,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1221,7 +1223,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1230,7 +1231,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1239,7 +1240,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1248,7 +1249,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1257,7 +1258,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1266,7 +1267,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1344,21 +1345,21 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request2.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request2.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request2.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request2.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request2.reason);
     }
     const url = `${options.api}${request2.versioned === false ? "" : `/v${options.version}`}${request2.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request2.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request2.files.entries()) {
@@ -1397,7 +1398,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
     const method = request2.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request2.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/index.mjs b/dist/index.mjs
index 00f78a9f4351300d24252ebbe6a5eece226685c7..602025ca39e7bbbd18115a3f47c02c34d7d245f8 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -182,6 +182,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -660,7 +661,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -741,10 +742,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -793,7 +794,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -962,7 +963,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -987,10 +988,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1091,7 +1092,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1133,12 +1134,14 @@ var REST = class _REST extends AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1164,7 +1167,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1180,7 +1182,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1189,7 +1190,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1198,7 +1199,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1207,7 +1208,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1216,7 +1217,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1225,7 +1226,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1303,21 +1304,21 @@ var REST = class _REST extends AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request2.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request2.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request2.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request2.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request2.reason);
     }
     const url = `${options.api}${request2.versioned === false ? "" : `/v${options.version}`}${request2.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request2.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request2.files.entries()) {
@@ -1356,7 +1357,7 @@ var REST = class _REST extends AsyncEventEmitter {
     const method = request2.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request2.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/web.d.mts b/dist/web.d.mts
index afcc98547e3dd056599a958029f951e43d19f323..4f123c7afa380d19a67095c1b610f92f1152d0db 100644
--- a/dist/web.d.mts
+++ b/dist/web.d.mts
@@ -351,6 +351,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -780,6 +781,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/web.d.ts b/dist/web.d.ts
index afcc98547e3dd056599a958029f951e43d19f323..4f123c7afa380d19a67095c1b610f92f1152d0db 100644
--- a/dist/web.d.ts
+++ b/dist/web.d.ts
@@ -351,6 +351,7 @@ interface RequestHeaders {
 declare enum RequestMethod {
     Delete = "DELETE",
     Get = "GET",
+    Head = "HEAD",
     Patch = "PATCH",
     Post = "POST",
     Put = "PUT"
@@ -780,6 +781,7 @@ declare class REST extends AsyncEventEmitter<RestEvents> {
     private hashTimer;
     private handlerTimer;
     readonly options: RESTOptions;
+    private readonly userAgent;
     constructor(options?: Partial<RESTOptions>);
     private setupSweepers;
     /**
diff --git a/dist/web.js b/dist/web.js
index f2d438ca5a8699a07de3bc960045c28cae873454..5b09043b45db5911bdf97c013397b2f19cfdb11c 100644
--- a/dist/web.js
+++ b/dist/web.js
@@ -157,6 +157,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -635,7 +636,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -716,10 +717,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -768,7 +769,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -937,7 +938,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -962,10 +963,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1066,7 +1067,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1108,12 +1109,14 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1139,7 +1142,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1155,7 +1157,6 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1164,7 +1165,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1173,7 +1174,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1182,7 +1183,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1191,7 +1192,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1200,7 +1201,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1278,21 +1279,21 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request.reason);
     }
     const url = `${options.api}${request.versioned === false ? "" : `/v${options.version}`}${request.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request.files.entries()) {
@@ -1331,7 +1332,7 @@ var REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {
     const method = request.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
diff --git a/dist/web.mjs b/dist/web.mjs
index 3f5a0c104bfa126980e62ed7c624a87621b56af7..904e83e8d108d172852bb1a0b7c2ba1615229476 100644
--- a/dist/web.mjs
+++ b/dist/web.mjs
@@ -114,6 +114,7 @@ var RateLimitError = class _RateLimitError extends Error {
 var RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {
   RequestMethod2["Delete"] = "DELETE";
   RequestMethod2["Get"] = "GET";
+  RequestMethod2["Head"] = "HEAD";
   RequestMethod2["Patch"] = "PATCH";
   RequestMethod2["Post"] = "POST";
   RequestMethod2["Put"] = "PUT";
@@ -592,7 +593,7 @@ async function makeNetworkRequest(manager, routeId, url, options, requestData, r
     manager.emit(
       "response" /* Response */,
       {
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         path: routeId.original,
         route: routeId.bucketRoute,
         options,
@@ -673,10 +674,10 @@ var BurstHandler = class {
    * @param retries - The number of retries this request has already attempted (recursion)
    */
   async runRequest(routeId, url, options, requestData, retries = 0) {
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -725,7 +726,7 @@ var BurstHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -894,7 +895,7 @@ var SequentialHandler = class {
       }
       const rateLimitData = {
         global: isGlobal,
-        method: options.method ?? "get",
+        method: options.method ?? "GET" /* Get */,
         url,
         route: routeId.bucketRoute,
         majorParameter: this.majorParameter,
@@ -919,10 +920,10 @@ var SequentialHandler = class {
       this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;
     }
     this.manager.globalRemaining--;
-    const method = options.method ?? "get";
+    const method = options.method ?? "GET" /* Get */;
     const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);
     if (res === null) {
-      return this.runRequest(routeId, url, options, requestData, ++retries);
+      return this.runRequest(routeId, url, options, requestData, retries + 1);
     }
     const status = res.status;
     let retryAfter = 0;
@@ -1023,7 +1024,7 @@ var SequentialHandler = class {
     } else {
       const handled = await handleErrors(this.manager, res, method, url, requestData, retries);
       if (handled === null) {
-        return this.runRequest(routeId, url, options, requestData, ++retries);
+        return this.runRequest(routeId, url, options, requestData, retries + 1);
       }
       return handled;
     }
@@ -1065,12 +1066,14 @@ var REST = class _REST extends AsyncEventEmitter {
   hashTimer;
   handlerTimer;
   options;
+  userAgent;
   constructor(options = {}) {
     super();
     this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn);
     this.options = { ...DefaultRestOptions, ...options };
     this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);
     this.agent = options.agent ?? null;
+    this.userAgent = `${DefaultUserAgent} ${options.userAgentAppendix}`.trimEnd();
     this.setupSweepers();
   }
   setupSweepers() {
@@ -1096,7 +1099,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("hashSweep" /* HashSweep */, sweptHashes);
       }, this.options.hashSweepInterval);
-      this.hashTimer.unref?.();
     }
     if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {
       validateMaxInterval(this.options.handlerSweepInterval);
@@ -1112,7 +1114,6 @@ var REST = class _REST extends AsyncEventEmitter {
         });
         this.emit("handlerSweep" /* HandlerSweep */, sweptHandlers);
       }, this.options.handlerSweepInterval);
-      this.handlerTimer.unref?.();
     }
   }
   /**
@@ -1121,7 +1122,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async get(fullRoute, options = {}) {
+  async get(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "GET" /* Get */ });
   }
   /**
@@ -1130,7 +1131,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async delete(fullRoute, options = {}) {
+  async delete(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "DELETE" /* Delete */ });
   }
   /**
@@ -1139,7 +1140,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async post(fullRoute, options = {}) {
+  async post(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "POST" /* Post */ });
   }
   /**
@@ -1148,7 +1149,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async put(fullRoute, options = {}) {
+  async put(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PUT" /* Put */ });
   }
   /**
@@ -1157,7 +1158,7 @@ var REST = class _REST extends AsyncEventEmitter {
    * @param fullRoute - The full route to query
    * @param options - Optional request options
    */
-  async patch(fullRoute, options = {}) {
+  async patch(fullRoute, options) {
     return this.request({ ...options, fullRoute, method: "PATCH" /* Patch */ });
   }
   /**
@@ -1235,21 +1236,21 @@ var REST = class _REST extends AsyncEventEmitter {
       }
     }
     const headers = {
-      ...this.options.headers,
-      "User-Agent": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()
+      ...options.headers,
+      "User-Agent": this.userAgent
     };
     if (request.auth !== false) {
       if (!this.#token) {
         throw new Error("Expected token to be set for this request, but none was present");
       }
-      headers.Authorization = `${request.authPrefix ?? this.options.authPrefix} ${this.#token}`;
+      headers.Authorization = `${request.authPrefix ?? options.authPrefix} ${this.#token}`;
     }
     if (request.reason?.length) {
       headers["X-Audit-Log-Reason"] = encodeURIComponent(request.reason);
     }
     const url = `${options.api}${request.versioned === false ? "" : `/v${options.version}`}${request.fullRoute}${query}`;
     let finalBody;
-    let additionalHeaders = {};
+    let additionalHeaders;
     if (request.files?.length) {
       const formData = new FormData();
       for (const [index, file] of request.files.entries()) {
@@ -1288,7 +1289,7 @@ var REST = class _REST extends AsyncEventEmitter {
     const method = request.method.toUpperCase();
     const fetchOptions = {
       // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing
-      body: ["GET", "HEAD"].includes(method) ? null : finalBody,
+      body: ["GET" /* Get */, "HEAD" /* Head */].includes(method) ? null : finalBody,
       headers: { ...request.headers, ...additionalHeaders, ...headers },
       method,
       // Prioritize setting an agent per request, use the agent for this instance otherwise.
